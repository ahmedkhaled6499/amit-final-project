
obstacle_avoidance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003498  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00003498  0000352c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800182  00800182  0000364e  2**0
                  ALLOC
  3 .stab         00002190  00000000  00000000  00003650  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ad0  00000000  00000000  000057e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000062b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00006450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00006640  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00008a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00009dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000af9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000b15c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000b44f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 ac 0b 	jmp	0x1758	; 0x1758 <__vector_1>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__vector_8>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__floatsisf+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d4 e0       	ldi	r29, 0x04	; 4
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e8 e9       	ldi	r30, 0x98	; 152
     162:	f4 e3       	ldi	r31, 0x34	; 52
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a2 38       	cpi	r26, 0x82	; 130
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a2 e8       	ldi	r26, 0x82	; 130
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a6 38       	cpi	r26, 0x86	; 134
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <main>
     184:	0c 94 4a 1a 	jmp	0x3494	; 0x3494 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <__stack+0x11>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <__stack+0xf>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <__stack+0x11>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <__stack+0x11>
     220:	aa e7       	ldi	r26, 0x7A	; 122
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <__stack+0x11>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <__stack+0xf>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <__stack+0x11>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <__stack+0xb>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <__stack+0xf>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <__stack+0xb>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <__stack+0x11>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 a6 17 	jmp	0x2f4c	; 0x2f4c <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8a e7       	ldi	r24, 0x7A	; 122
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__divsf3+0x144>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__divsf3+0x14a>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__divsf3+0x144>
     794:	6a e7       	ldi	r22, 0x7A	; 122
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__divsf3+0x14a>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__divsf3+0x14a>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__divsf3+0x13c>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__divsf3+0x13c>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__divsf3+0x13c>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 20 07 	call	0xe40	; 0xe40 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 20 07 	call	0xe40	; 0xe40 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 20 07 	call	0xe40	; 0xe40 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__epilogue_restores__+0x18>

000009a4 <__floatsisf>:
     9a4:	a8 e0       	ldi	r26, 0x08	; 8
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__prologue_saves__+0x12>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	da 01       	movw	r26, r20
     9ba:	c9 01       	movw	r24, r18
     9bc:	88 27       	eor	r24, r24
     9be:	b7 fd       	sbrc	r27, 7
     9c0:	83 95       	inc	r24
     9c2:	99 27       	eor	r25, r25
     9c4:	aa 27       	eor	r26, r26
     9c6:	bb 27       	eor	r27, r27
     9c8:	b8 2e       	mov	r11, r24
     9ca:	21 15       	cp	r18, r1
     9cc:	31 05       	cpc	r19, r1
     9ce:	41 05       	cpc	r20, r1
     9d0:	51 05       	cpc	r21, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__floatsisf+0x36>
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	3a c0       	rjmp	.+116    	; 0xa4e <__floatsisf+0xaa>
     9da:	88 23       	and	r24, r24
     9dc:	a9 f0       	breq	.+42     	; 0xa08 <__floatsisf+0x64>
     9de:	20 30       	cpi	r18, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	38 07       	cpc	r19, r24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	48 07       	cpc	r20, r24
     9e8:	80 e8       	ldi	r24, 0x80	; 128
     9ea:	58 07       	cpc	r21, r24
     9ec:	29 f4       	brne	.+10     	; 0x9f8 <__floatsisf+0x54>
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	9f ec       	ldi	r25, 0xCF	; 207
     9f6:	30 c0       	rjmp	.+96     	; 0xa58 <__floatsisf+0xb4>
     9f8:	ee 24       	eor	r14, r14
     9fa:	ff 24       	eor	r15, r15
     9fc:	87 01       	movw	r16, r14
     9fe:	e2 1a       	sub	r14, r18
     a00:	f3 0a       	sbc	r15, r19
     a02:	04 0b       	sbc	r16, r20
     a04:	15 0b       	sbc	r17, r21
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <__floatsisf+0x68>
     a08:	79 01       	movw	r14, r18
     a0a:	8a 01       	movw	r16, r20
     a0c:	8e e1       	ldi	r24, 0x1E	; 30
     a0e:	c8 2e       	mov	r12, r24
     a10:	d1 2c       	mov	r13, r1
     a12:	dc 82       	std	Y+4, r13	; 0x04
     a14:	cb 82       	std	Y+3, r12	; 0x03
     a16:	ed 82       	std	Y+5, r14	; 0x05
     a18:	fe 82       	std	Y+6, r15	; 0x06
     a1a:	0f 83       	std	Y+7, r16	; 0x07
     a1c:	18 87       	std	Y+8, r17	; 0x08
     a1e:	c8 01       	movw	r24, r16
     a20:	b7 01       	movw	r22, r14
     a22:	0e 94 84 05 	call	0xb08	; 0xb08 <__clzsi2>
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	18 16       	cp	r1, r24
     a2a:	19 06       	cpc	r1, r25
     a2c:	84 f4       	brge	.+32     	; 0xa4e <__floatsisf+0xaa>
     a2e:	08 2e       	mov	r0, r24
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__floatsisf+0x96>
     a32:	ee 0c       	add	r14, r14
     a34:	ff 1c       	adc	r15, r15
     a36:	00 1f       	adc	r16, r16
     a38:	11 1f       	adc	r17, r17
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__floatsisf+0x8e>
     a3e:	ed 82       	std	Y+5, r14	; 0x05
     a40:	fe 82       	std	Y+6, r15	; 0x06
     a42:	0f 83       	std	Y+7, r16	; 0x07
     a44:	18 87       	std	Y+8, r17	; 0x08
     a46:	c8 1a       	sub	r12, r24
     a48:	d9 0a       	sbc	r13, r25
     a4a:	dc 82       	std	Y+4, r13	; 0x04
     a4c:	cb 82       	std	Y+3, r12	; 0x03
     a4e:	ba 82       	std	Y+2, r11	; 0x02
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 d3 05 	call	0xba6	; 0xba6 <__pack_f>
     a58:	28 96       	adiw	r28, 0x08	; 8
     a5a:	e9 e0       	ldi	r30, 0x09	; 9
     a5c:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__epilogue_restores__+0x12>

00000a60 <__fixsfsi>:
     a60:	ac e0       	ldi	r26, 0x0C	; 12
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e6 e3       	ldi	r30, 0x36	; 54
     a66:	f5 e0       	ldi	r31, 0x05	; 5
     a68:	0c 94 b6 17 	jmp	0x2f6c	; 0x2f6c <__prologue_saves__+0x20>
     a6c:	69 83       	std	Y+1, r22	; 0x01
     a6e:	7a 83       	std	Y+2, r23	; 0x02
     a70:	8b 83       	std	Y+3, r24	; 0x03
     a72:	9c 83       	std	Y+4, r25	; 0x04
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	be 01       	movw	r22, r28
     a7a:	6b 5f       	subi	r22, 0xFB	; 251
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	0e 94 a8 06 	call	0xd50	; 0xd50 <__unpack_f>
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	61 f1       	breq	.+88     	; 0xae0 <__fixsfsi+0x80>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	50 f1       	brcs	.+84     	; 0xae0 <__fixsfsi+0x80>
     a8c:	84 30       	cpi	r24, 0x04	; 4
     a8e:	21 f4       	brne	.+8      	; 0xa98 <__fixsfsi+0x38>
     a90:	8e 81       	ldd	r24, Y+6	; 0x06
     a92:	88 23       	and	r24, r24
     a94:	51 f1       	breq	.+84     	; 0xaea <__fixsfsi+0x8a>
     a96:	2e c0       	rjmp	.+92     	; 0xaf4 <__fixsfsi+0x94>
     a98:	2f 81       	ldd	r18, Y+7	; 0x07
     a9a:	38 85       	ldd	r19, Y+8	; 0x08
     a9c:	37 fd       	sbrc	r19, 7
     a9e:	20 c0       	rjmp	.+64     	; 0xae0 <__fixsfsi+0x80>
     aa0:	6e 81       	ldd	r22, Y+6	; 0x06
     aa2:	2f 31       	cpi	r18, 0x1F	; 31
     aa4:	31 05       	cpc	r19, r1
     aa6:	1c f0       	brlt	.+6      	; 0xaae <__fixsfsi+0x4e>
     aa8:	66 23       	and	r22, r22
     aaa:	f9 f0       	breq	.+62     	; 0xaea <__fixsfsi+0x8a>
     aac:	23 c0       	rjmp	.+70     	; 0xaf4 <__fixsfsi+0x94>
     aae:	8e e1       	ldi	r24, 0x1E	; 30
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	82 1b       	sub	r24, r18
     ab4:	93 0b       	sbc	r25, r19
     ab6:	29 85       	ldd	r18, Y+9	; 0x09
     ab8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aba:	4b 85       	ldd	r20, Y+11	; 0x0b
     abc:	5c 85       	ldd	r21, Y+12	; 0x0c
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__fixsfsi+0x68>
     ac0:	56 95       	lsr	r21
     ac2:	47 95       	ror	r20
     ac4:	37 95       	ror	r19
     ac6:	27 95       	ror	r18
     ac8:	8a 95       	dec	r24
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__fixsfsi+0x60>
     acc:	66 23       	and	r22, r22
     ace:	b1 f0       	breq	.+44     	; 0xafc <__fixsfsi+0x9c>
     ad0:	50 95       	com	r21
     ad2:	40 95       	com	r20
     ad4:	30 95       	com	r19
     ad6:	21 95       	neg	r18
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	4f 4f       	sbci	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	0e c0       	rjmp	.+28     	; 0xafc <__fixsfsi+0x9c>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <__fixsfsi+0x9c>
     aea:	2f ef       	ldi	r18, 0xFF	; 255
     aec:	3f ef       	ldi	r19, 0xFF	; 255
     aee:	4f ef       	ldi	r20, 0xFF	; 255
     af0:	5f e7       	ldi	r21, 0x7F	; 127
     af2:	04 c0       	rjmp	.+8      	; 0xafc <__fixsfsi+0x9c>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e8       	ldi	r21, 0x80	; 128
     afc:	b9 01       	movw	r22, r18
     afe:	ca 01       	movw	r24, r20
     b00:	2c 96       	adiw	r28, 0x0c	; 12
     b02:	e2 e0       	ldi	r30, 0x02	; 2
     b04:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__epilogue_restores__+0x20>

00000b08 <__clzsi2>:
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	7b 01       	movw	r14, r22
     b12:	8c 01       	movw	r16, r24
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	e8 16       	cp	r14, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	f8 06       	cpc	r15, r24
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	08 07       	cpc	r16, r24
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	18 07       	cpc	r17, r24
     b24:	88 f4       	brcc	.+34     	; 0xb48 <__clzsi2+0x40>
     b26:	8f ef       	ldi	r24, 0xFF	; 255
     b28:	e8 16       	cp	r14, r24
     b2a:	f1 04       	cpc	r15, r1
     b2c:	01 05       	cpc	r16, r1
     b2e:	11 05       	cpc	r17, r1
     b30:	31 f0       	breq	.+12     	; 0xb3e <__clzsi2+0x36>
     b32:	28 f0       	brcs	.+10     	; 0xb3e <__clzsi2+0x36>
     b34:	88 e0       	ldi	r24, 0x08	; 8
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	a0 e0       	ldi	r26, 0x00	; 0
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	17 c0       	rjmp	.+46     	; 0xb6c <__clzsi2+0x64>
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	b0 e0       	ldi	r27, 0x00	; 0
     b46:	12 c0       	rjmp	.+36     	; 0xb6c <__clzsi2+0x64>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	e8 16       	cp	r14, r24
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	f8 06       	cpc	r15, r24
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	08 07       	cpc	r16, r24
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	18 07       	cpc	r17, r24
     b58:	28 f0       	brcs	.+10     	; 0xb64 <__clzsi2+0x5c>
     b5a:	88 e1       	ldi	r24, 0x18	; 24
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	04 c0       	rjmp	.+8      	; 0xb6c <__clzsi2+0x64>
     b64:	80 e1       	ldi	r24, 0x10	; 16
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a0 e0       	ldi	r26, 0x00	; 0
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	20 e2       	ldi	r18, 0x20	; 32
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	28 1b       	sub	r18, r24
     b76:	39 0b       	sbc	r19, r25
     b78:	4a 0b       	sbc	r20, r26
     b7a:	5b 0b       	sbc	r21, r27
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__clzsi2+0x7e>
     b7e:	16 95       	lsr	r17
     b80:	07 95       	ror	r16
     b82:	f7 94       	ror	r15
     b84:	e7 94       	ror	r14
     b86:	8a 95       	dec	r24
     b88:	d2 f7       	brpl	.-12     	; 0xb7e <__clzsi2+0x76>
     b8a:	f7 01       	movw	r30, r14
     b8c:	ee 57       	subi	r30, 0x7E	; 126
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	80 81       	ld	r24, Z
     b92:	28 1b       	sub	r18, r24
     b94:	31 09       	sbc	r19, r1
     b96:	41 09       	sbc	r20, r1
     b98:	51 09       	sbc	r21, r1
     b9a:	c9 01       	movw	r24, r18
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	08 95       	ret

00000ba6 <__pack_f>:
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	fc 01       	movw	r30, r24
     bb2:	e4 80       	ldd	r14, Z+4	; 0x04
     bb4:	f5 80       	ldd	r15, Z+5	; 0x05
     bb6:	06 81       	ldd	r16, Z+6	; 0x06
     bb8:	17 81       	ldd	r17, Z+7	; 0x07
     bba:	d1 80       	ldd	r13, Z+1	; 0x01
     bbc:	80 81       	ld	r24, Z
     bbe:	82 30       	cpi	r24, 0x02	; 2
     bc0:	48 f4       	brcc	.+18     	; 0xbd4 <__pack_f+0x2e>
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	a0 e1       	ldi	r26, 0x10	; 16
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e8 2a       	or	r14, r24
     bcc:	f9 2a       	or	r15, r25
     bce:	0a 2b       	or	r16, r26
     bd0:	1b 2b       	or	r17, r27
     bd2:	a5 c0       	rjmp	.+330    	; 0xd1e <__pack_f+0x178>
     bd4:	84 30       	cpi	r24, 0x04	; 4
     bd6:	09 f4       	brne	.+2      	; 0xbda <__pack_f+0x34>
     bd8:	9f c0       	rjmp	.+318    	; 0xd18 <__pack_f+0x172>
     bda:	82 30       	cpi	r24, 0x02	; 2
     bdc:	21 f4       	brne	.+8      	; 0xbe6 <__pack_f+0x40>
     bde:	ee 24       	eor	r14, r14
     be0:	ff 24       	eor	r15, r15
     be2:	87 01       	movw	r16, r14
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <__pack_f+0x4a>
     be6:	e1 14       	cp	r14, r1
     be8:	f1 04       	cpc	r15, r1
     bea:	01 05       	cpc	r16, r1
     bec:	11 05       	cpc	r17, r1
     bee:	19 f4       	brne	.+6      	; 0xbf6 <__pack_f+0x50>
     bf0:	e0 e0       	ldi	r30, 0x00	; 0
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	96 c0       	rjmp	.+300    	; 0xd22 <__pack_f+0x17c>
     bf6:	62 81       	ldd	r22, Z+2	; 0x02
     bf8:	73 81       	ldd	r23, Z+3	; 0x03
     bfa:	9f ef       	ldi	r25, 0xFF	; 255
     bfc:	62 38       	cpi	r22, 0x82	; 130
     bfe:	79 07       	cpc	r23, r25
     c00:	0c f0       	brlt	.+2      	; 0xc04 <__pack_f+0x5e>
     c02:	5b c0       	rjmp	.+182    	; 0xcba <__pack_f+0x114>
     c04:	22 e8       	ldi	r18, 0x82	; 130
     c06:	3f ef       	ldi	r19, 0xFF	; 255
     c08:	26 1b       	sub	r18, r22
     c0a:	37 0b       	sbc	r19, r23
     c0c:	2a 31       	cpi	r18, 0x1A	; 26
     c0e:	31 05       	cpc	r19, r1
     c10:	2c f0       	brlt	.+10     	; 0xc1c <__pack_f+0x76>
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	2a c0       	rjmp	.+84     	; 0xc70 <__pack_f+0xca>
     c1c:	b8 01       	movw	r22, r16
     c1e:	a7 01       	movw	r20, r14
     c20:	02 2e       	mov	r0, r18
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <__pack_f+0x86>
     c24:	76 95       	lsr	r23
     c26:	67 95       	ror	r22
     c28:	57 95       	ror	r21
     c2a:	47 95       	ror	r20
     c2c:	0a 94       	dec	r0
     c2e:	d2 f7       	brpl	.-12     	; 0xc24 <__pack_f+0x7e>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	04 c0       	rjmp	.+8      	; 0xc42 <__pack_f+0x9c>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	aa 1f       	adc	r26, r26
     c40:	bb 1f       	adc	r27, r27
     c42:	2a 95       	dec	r18
     c44:	d2 f7       	brpl	.-12     	; 0xc3a <__pack_f+0x94>
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	a1 09       	sbc	r26, r1
     c4a:	b1 09       	sbc	r27, r1
     c4c:	8e 21       	and	r24, r14
     c4e:	9f 21       	and	r25, r15
     c50:	a0 23       	and	r26, r16
     c52:	b1 23       	and	r27, r17
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	a1 05       	cpc	r26, r1
     c58:	b1 05       	cpc	r27, r1
     c5a:	21 f0       	breq	.+8      	; 0xc64 <__pack_f+0xbe>
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a0 e0       	ldi	r26, 0x00	; 0
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	9a 01       	movw	r18, r20
     c66:	ab 01       	movw	r20, r22
     c68:	28 2b       	or	r18, r24
     c6a:	39 2b       	or	r19, r25
     c6c:	4a 2b       	or	r20, r26
     c6e:	5b 2b       	or	r21, r27
     c70:	da 01       	movw	r26, r20
     c72:	c9 01       	movw	r24, r18
     c74:	8f 77       	andi	r24, 0x7F	; 127
     c76:	90 70       	andi	r25, 0x00	; 0
     c78:	a0 70       	andi	r26, 0x00	; 0
     c7a:	b0 70       	andi	r27, 0x00	; 0
     c7c:	80 34       	cpi	r24, 0x40	; 64
     c7e:	91 05       	cpc	r25, r1
     c80:	a1 05       	cpc	r26, r1
     c82:	b1 05       	cpc	r27, r1
     c84:	39 f4       	brne	.+14     	; 0xc94 <__pack_f+0xee>
     c86:	27 ff       	sbrs	r18, 7
     c88:	09 c0       	rjmp	.+18     	; 0xc9c <__pack_f+0xf6>
     c8a:	20 5c       	subi	r18, 0xC0	; 192
     c8c:	3f 4f       	sbci	r19, 0xFF	; 255
     c8e:	4f 4f       	sbci	r20, 0xFF	; 255
     c90:	5f 4f       	sbci	r21, 0xFF	; 255
     c92:	04 c0       	rjmp	.+8      	; 0xc9c <__pack_f+0xf6>
     c94:	21 5c       	subi	r18, 0xC1	; 193
     c96:	3f 4f       	sbci	r19, 0xFF	; 255
     c98:	4f 4f       	sbci	r20, 0xFF	; 255
     c9a:	5f 4f       	sbci	r21, 0xFF	; 255
     c9c:	e0 e0       	ldi	r30, 0x00	; 0
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	20 30       	cpi	r18, 0x00	; 0
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	3a 07       	cpc	r19, r26
     ca6:	a0 e0       	ldi	r26, 0x00	; 0
     ca8:	4a 07       	cpc	r20, r26
     caa:	a0 e4       	ldi	r26, 0x40	; 64
     cac:	5a 07       	cpc	r21, r26
     cae:	10 f0       	brcs	.+4      	; 0xcb4 <__pack_f+0x10e>
     cb0:	e1 e0       	ldi	r30, 0x01	; 1
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	79 01       	movw	r14, r18
     cb6:	8a 01       	movw	r16, r20
     cb8:	27 c0       	rjmp	.+78     	; 0xd08 <__pack_f+0x162>
     cba:	60 38       	cpi	r22, 0x80	; 128
     cbc:	71 05       	cpc	r23, r1
     cbe:	64 f5       	brge	.+88     	; 0xd18 <__pack_f+0x172>
     cc0:	fb 01       	movw	r30, r22
     cc2:	e1 58       	subi	r30, 0x81	; 129
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	d8 01       	movw	r26, r16
     cc8:	c7 01       	movw	r24, r14
     cca:	8f 77       	andi	r24, 0x7F	; 127
     ccc:	90 70       	andi	r25, 0x00	; 0
     cce:	a0 70       	andi	r26, 0x00	; 0
     cd0:	b0 70       	andi	r27, 0x00	; 0
     cd2:	80 34       	cpi	r24, 0x40	; 64
     cd4:	91 05       	cpc	r25, r1
     cd6:	a1 05       	cpc	r26, r1
     cd8:	b1 05       	cpc	r27, r1
     cda:	39 f4       	brne	.+14     	; 0xcea <__pack_f+0x144>
     cdc:	e7 fe       	sbrs	r14, 7
     cde:	0d c0       	rjmp	.+26     	; 0xcfa <__pack_f+0x154>
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	a0 e0       	ldi	r26, 0x00	; 0
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <__pack_f+0x14c>
     cea:	8f e3       	ldi	r24, 0x3F	; 63
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	a0 e0       	ldi	r26, 0x00	; 0
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e8 0e       	add	r14, r24
     cf4:	f9 1e       	adc	r15, r25
     cf6:	0a 1f       	adc	r16, r26
     cf8:	1b 1f       	adc	r17, r27
     cfa:	17 ff       	sbrs	r17, 7
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <__pack_f+0x162>
     cfe:	16 95       	lsr	r17
     d00:	07 95       	ror	r16
     d02:	f7 94       	ror	r15
     d04:	e7 94       	ror	r14
     d06:	31 96       	adiw	r30, 0x01	; 1
     d08:	87 e0       	ldi	r24, 0x07	; 7
     d0a:	16 95       	lsr	r17
     d0c:	07 95       	ror	r16
     d0e:	f7 94       	ror	r15
     d10:	e7 94       	ror	r14
     d12:	8a 95       	dec	r24
     d14:	d1 f7       	brne	.-12     	; 0xd0a <__pack_f+0x164>
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <__pack_f+0x17c>
     d18:	ee 24       	eor	r14, r14
     d1a:	ff 24       	eor	r15, r15
     d1c:	87 01       	movw	r16, r14
     d1e:	ef ef       	ldi	r30, 0xFF	; 255
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	6e 2f       	mov	r22, r30
     d24:	67 95       	ror	r22
     d26:	66 27       	eor	r22, r22
     d28:	67 95       	ror	r22
     d2a:	90 2f       	mov	r25, r16
     d2c:	9f 77       	andi	r25, 0x7F	; 127
     d2e:	d7 94       	ror	r13
     d30:	dd 24       	eor	r13, r13
     d32:	d7 94       	ror	r13
     d34:	8e 2f       	mov	r24, r30
     d36:	86 95       	lsr	r24
     d38:	49 2f       	mov	r20, r25
     d3a:	46 2b       	or	r20, r22
     d3c:	58 2f       	mov	r21, r24
     d3e:	5d 29       	or	r21, r13
     d40:	b7 01       	movw	r22, r14
     d42:	ca 01       	movw	r24, r20
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	df 90       	pop	r13
     d4e:	08 95       	ret

00000d50 <__unpack_f>:
     d50:	fc 01       	movw	r30, r24
     d52:	db 01       	movw	r26, r22
     d54:	40 81       	ld	r20, Z
     d56:	51 81       	ldd	r21, Z+1	; 0x01
     d58:	22 81       	ldd	r18, Z+2	; 0x02
     d5a:	62 2f       	mov	r22, r18
     d5c:	6f 77       	andi	r22, 0x7F	; 127
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	22 1f       	adc	r18, r18
     d62:	22 27       	eor	r18, r18
     d64:	22 1f       	adc	r18, r18
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	89 2f       	mov	r24, r25
     d6a:	88 0f       	add	r24, r24
     d6c:	82 2b       	or	r24, r18
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	99 1f       	adc	r25, r25
     d74:	99 27       	eor	r25, r25
     d76:	99 1f       	adc	r25, r25
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	9c 93       	st	X, r25
     d7c:	11 97       	sbiw	r26, 0x01	; 1
     d7e:	21 15       	cp	r18, r1
     d80:	31 05       	cpc	r19, r1
     d82:	a9 f5       	brne	.+106    	; 0xdee <__unpack_f+0x9e>
     d84:	41 15       	cp	r20, r1
     d86:	51 05       	cpc	r21, r1
     d88:	61 05       	cpc	r22, r1
     d8a:	71 05       	cpc	r23, r1
     d8c:	11 f4       	brne	.+4      	; 0xd92 <__unpack_f+0x42>
     d8e:	82 e0       	ldi	r24, 0x02	; 2
     d90:	37 c0       	rjmp	.+110    	; 0xe00 <__unpack_f+0xb0>
     d92:	82 e8       	ldi	r24, 0x82	; 130
     d94:	9f ef       	ldi	r25, 0xFF	; 255
     d96:	13 96       	adiw	r26, 0x03	; 3
     d98:	9c 93       	st	X, r25
     d9a:	8e 93       	st	-X, r24
     d9c:	12 97       	sbiw	r26, 0x02	; 2
     d9e:	9a 01       	movw	r18, r20
     da0:	ab 01       	movw	r20, r22
     da2:	67 e0       	ldi	r22, 0x07	; 7
     da4:	22 0f       	add	r18, r18
     da6:	33 1f       	adc	r19, r19
     da8:	44 1f       	adc	r20, r20
     daa:	55 1f       	adc	r21, r21
     dac:	6a 95       	dec	r22
     dae:	d1 f7       	brne	.-12     	; 0xda4 <__unpack_f+0x54>
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	8c 93       	st	X, r24
     db4:	0d c0       	rjmp	.+26     	; 0xdd0 <__unpack_f+0x80>
     db6:	22 0f       	add	r18, r18
     db8:	33 1f       	adc	r19, r19
     dba:	44 1f       	adc	r20, r20
     dbc:	55 1f       	adc	r21, r21
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	8d 91       	ld	r24, X+
     dc2:	9c 91       	ld	r25, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	13 96       	adiw	r26, 0x03	; 3
     dca:	9c 93       	st	X, r25
     dcc:	8e 93       	st	-X, r24
     dce:	12 97       	sbiw	r26, 0x02	; 2
     dd0:	20 30       	cpi	r18, 0x00	; 0
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	38 07       	cpc	r19, r24
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	48 07       	cpc	r20, r24
     dda:	80 e4       	ldi	r24, 0x40	; 64
     ddc:	58 07       	cpc	r21, r24
     dde:	58 f3       	brcs	.-42     	; 0xdb6 <__unpack_f+0x66>
     de0:	14 96       	adiw	r26, 0x04	; 4
     de2:	2d 93       	st	X+, r18
     de4:	3d 93       	st	X+, r19
     de6:	4d 93       	st	X+, r20
     de8:	5c 93       	st	X, r21
     dea:	17 97       	sbiw	r26, 0x07	; 7
     dec:	08 95       	ret
     dee:	2f 3f       	cpi	r18, 0xFF	; 255
     df0:	31 05       	cpc	r19, r1
     df2:	79 f4       	brne	.+30     	; 0xe12 <__unpack_f+0xc2>
     df4:	41 15       	cp	r20, r1
     df6:	51 05       	cpc	r21, r1
     df8:	61 05       	cpc	r22, r1
     dfa:	71 05       	cpc	r23, r1
     dfc:	19 f4       	brne	.+6      	; 0xe04 <__unpack_f+0xb4>
     dfe:	84 e0       	ldi	r24, 0x04	; 4
     e00:	8c 93       	st	X, r24
     e02:	08 95       	ret
     e04:	64 ff       	sbrs	r22, 4
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <__unpack_f+0xbe>
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	8c 93       	st	X, r24
     e0c:	12 c0       	rjmp	.+36     	; 0xe32 <__unpack_f+0xe2>
     e0e:	1c 92       	st	X, r1
     e10:	10 c0       	rjmp	.+32     	; 0xe32 <__unpack_f+0xe2>
     e12:	2f 57       	subi	r18, 0x7F	; 127
     e14:	30 40       	sbci	r19, 0x00	; 0
     e16:	13 96       	adiw	r26, 0x03	; 3
     e18:	3c 93       	st	X, r19
     e1a:	2e 93       	st	-X, r18
     e1c:	12 97       	sbiw	r26, 0x02	; 2
     e1e:	83 e0       	ldi	r24, 0x03	; 3
     e20:	8c 93       	st	X, r24
     e22:	87 e0       	ldi	r24, 0x07	; 7
     e24:	44 0f       	add	r20, r20
     e26:	55 1f       	adc	r21, r21
     e28:	66 1f       	adc	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	8a 95       	dec	r24
     e2e:	d1 f7       	brne	.-12     	; 0xe24 <__unpack_f+0xd4>
     e30:	70 64       	ori	r23, 0x40	; 64
     e32:	14 96       	adiw	r26, 0x04	; 4
     e34:	4d 93       	st	X+, r20
     e36:	5d 93       	st	X+, r21
     e38:	6d 93       	st	X+, r22
     e3a:	7c 93       	st	X, r23
     e3c:	17 97       	sbiw	r26, 0x07	; 7
     e3e:	08 95       	ret

00000e40 <__fpcmp_parts_f>:
     e40:	1f 93       	push	r17
     e42:	dc 01       	movw	r26, r24
     e44:	fb 01       	movw	r30, r22
     e46:	9c 91       	ld	r25, X
     e48:	92 30       	cpi	r25, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0xe>
     e4c:	47 c0       	rjmp	.+142    	; 0xedc <__fpcmp_parts_f+0x9c>
     e4e:	80 81       	ld	r24, Z
     e50:	82 30       	cpi	r24, 0x02	; 2
     e52:	08 f4       	brcc	.+2      	; 0xe56 <__fpcmp_parts_f+0x16>
     e54:	43 c0       	rjmp	.+134    	; 0xedc <__fpcmp_parts_f+0x9c>
     e56:	94 30       	cpi	r25, 0x04	; 4
     e58:	51 f4       	brne	.+20     	; 0xe6e <__fpcmp_parts_f+0x2e>
     e5a:	11 96       	adiw	r26, 0x01	; 1
     e5c:	1c 91       	ld	r17, X
     e5e:	84 30       	cpi	r24, 0x04	; 4
     e60:	99 f5       	brne	.+102    	; 0xec8 <__fpcmp_parts_f+0x88>
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	68 2f       	mov	r22, r24
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	61 1b       	sub	r22, r17
     e6a:	71 09       	sbc	r23, r1
     e6c:	3f c0       	rjmp	.+126    	; 0xeec <__fpcmp_parts_f+0xac>
     e6e:	84 30       	cpi	r24, 0x04	; 4
     e70:	21 f0       	breq	.+8      	; 0xe7a <__fpcmp_parts_f+0x3a>
     e72:	92 30       	cpi	r25, 0x02	; 2
     e74:	31 f4       	brne	.+12     	; 0xe82 <__fpcmp_parts_f+0x42>
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	b9 f1       	breq	.+110    	; 0xee8 <__fpcmp_parts_f+0xa8>
     e7a:	81 81       	ldd	r24, Z+1	; 0x01
     e7c:	88 23       	and	r24, r24
     e7e:	89 f1       	breq	.+98     	; 0xee2 <__fpcmp_parts_f+0xa2>
     e80:	2d c0       	rjmp	.+90     	; 0xedc <__fpcmp_parts_f+0x9c>
     e82:	11 96       	adiw	r26, 0x01	; 1
     e84:	1c 91       	ld	r17, X
     e86:	11 97       	sbiw	r26, 0x01	; 1
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	f1 f0       	breq	.+60     	; 0xec8 <__fpcmp_parts_f+0x88>
     e8c:	81 81       	ldd	r24, Z+1	; 0x01
     e8e:	18 17       	cp	r17, r24
     e90:	d9 f4       	brne	.+54     	; 0xec8 <__fpcmp_parts_f+0x88>
     e92:	12 96       	adiw	r26, 0x02	; 2
     e94:	2d 91       	ld	r18, X+
     e96:	3c 91       	ld	r19, X
     e98:	13 97       	sbiw	r26, 0x03	; 3
     e9a:	82 81       	ldd	r24, Z+2	; 0x02
     e9c:	93 81       	ldd	r25, Z+3	; 0x03
     e9e:	82 17       	cp	r24, r18
     ea0:	93 07       	cpc	r25, r19
     ea2:	94 f0       	brlt	.+36     	; 0xec8 <__fpcmp_parts_f+0x88>
     ea4:	28 17       	cp	r18, r24
     ea6:	39 07       	cpc	r19, r25
     ea8:	bc f0       	brlt	.+46     	; 0xed8 <__fpcmp_parts_f+0x98>
     eaa:	14 96       	adiw	r26, 0x04	; 4
     eac:	8d 91       	ld	r24, X+
     eae:	9d 91       	ld	r25, X+
     eb0:	0d 90       	ld	r0, X+
     eb2:	bc 91       	ld	r27, X
     eb4:	a0 2d       	mov	r26, r0
     eb6:	24 81       	ldd	r18, Z+4	; 0x04
     eb8:	35 81       	ldd	r19, Z+5	; 0x05
     eba:	46 81       	ldd	r20, Z+6	; 0x06
     ebc:	57 81       	ldd	r21, Z+7	; 0x07
     ebe:	28 17       	cp	r18, r24
     ec0:	39 07       	cpc	r19, r25
     ec2:	4a 07       	cpc	r20, r26
     ec4:	5b 07       	cpc	r21, r27
     ec6:	18 f4       	brcc	.+6      	; 0xece <__fpcmp_parts_f+0x8e>
     ec8:	11 23       	and	r17, r17
     eca:	41 f0       	breq	.+16     	; 0xedc <__fpcmp_parts_f+0x9c>
     ecc:	0a c0       	rjmp	.+20     	; 0xee2 <__fpcmp_parts_f+0xa2>
     ece:	82 17       	cp	r24, r18
     ed0:	93 07       	cpc	r25, r19
     ed2:	a4 07       	cpc	r26, r20
     ed4:	b5 07       	cpc	r27, r21
     ed6:	40 f4       	brcc	.+16     	; 0xee8 <__fpcmp_parts_f+0xa8>
     ed8:	11 23       	and	r17, r17
     eda:	19 f0       	breq	.+6      	; 0xee2 <__fpcmp_parts_f+0xa2>
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <__fpcmp_parts_f+0xac>
     ee2:	6f ef       	ldi	r22, 0xFF	; 255
     ee4:	7f ef       	ldi	r23, 0xFF	; 255
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <__fpcmp_parts_f+0xac>
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	cb 01       	movw	r24, r22
     eee:	1f 91       	pop	r17
     ef0:	08 95       	ret

00000ef2 <IR>:

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

void IR (){
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62

SREG |=(1<<7);
     efa:	af e5       	ldi	r26, 0x5F	; 95
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ef e5       	ldi	r30, 0x5F	; 95
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	80 68       	ori	r24, 0x80	; 128
     f06:	8c 93       	st	X, r24
MCUCR = (1<<1) | (1<<0);
     f08:	e5 e5       	ldi	r30, 0x55	; 85
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	80 83       	st	Z, r24

GICR |=(1<<6);
     f10:	ab e5       	ldi	r26, 0x5B	; 91
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	eb e5       	ldi	r30, 0x5B	; 91
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 64       	ori	r24, 0x40	; 64
     f1c:	8c 93       	st	X, r24

}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <LCD_Command>:

#include "LCD_16x2_H_file.h"						/* Include LCD header file */


void LCD_Command (char cmd)							/* LCD command write function */
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	a7 97       	sbiw	r28, 0x27	; 39
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	8f a3       	std	Y+39, r24	; 0x27
	LCD_Data_Port = cmd;							/* Write command data to LCD data port */
     f3a:	eb e3       	ldi	r30, 0x3B	; 59
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	8f a1       	ldd	r24, Y+39	; 0x27
     f40:	80 83       	st	Z, r24
	LCD_Command_Port &= ~((1<<RS)|(1<<RW));			/* Make RS LOW (command reg.), RW LOW (Write) */
     f42:	a5 e3       	ldi	r26, 0x35	; 53
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e5 e3       	ldi	r30, 0x35	; 53
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8f 79       	andi	r24, 0x9F	; 159
     f4e:	8c 93       	st	X, r24
	LCD_Command_Port |= (1<<EN);					/* High to Low transition on EN (Enable) */
     f50:	a5 e3       	ldi	r26, 0x35	; 53
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e3       	ldi	r30, 0x35	; 53
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 61       	ori	r24, 0x10	; 16
     f5c:	8c 93       	st	X, r24
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e8       	ldi	r26, 0x80	; 128
     f64:	bf e3       	ldi	r27, 0x3F	; 63
     f66:	8b a3       	std	Y+35, r24	; 0x23
     f68:	9c a3       	std	Y+36, r25	; 0x24
     f6a:	ad a3       	std	Y+37, r26	; 0x25
     f6c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f6e:	6b a1       	ldd	r22, Y+35	; 0x23
     f70:	7c a1       	ldd	r23, Y+36	; 0x24
     f72:	8d a1       	ldd	r24, Y+37	; 0x25
     f74:	9e a1       	ldd	r25, Y+38	; 0x26
     f76:	2b ea       	ldi	r18, 0xAB	; 171
     f78:	3a ea       	ldi	r19, 0xAA	; 170
     f7a:	4a e2       	ldi	r20, 0x2A	; 42
     f7c:	50 e4       	ldi	r21, 0x40	; 64
     f7e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	8f 8f       	std	Y+31, r24	; 0x1f
     f88:	98 a3       	std	Y+32, r25	; 0x20
     f8a:	a9 a3       	std	Y+33, r26	; 0x21
     f8c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     f8e:	6f 8d       	ldd	r22, Y+31	; 0x1f
     f90:	78 a1       	ldd	r23, Y+32	; 0x20
     f92:	89 a1       	ldd	r24, Y+33	; 0x21
     f94:	9a a1       	ldd	r25, Y+34	; 0x22
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	40 e8       	ldi	r20, 0x80	; 128
     f9c:	5f e3       	ldi	r21, 0x3F	; 63
     f9e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
     fa2:	88 23       	and	r24, r24
     fa4:	1c f4       	brge	.+6      	; 0xfac <LCD_Command+0x88>
		__ticks = 1;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	8e 8f       	std	Y+30, r24	; 0x1e
     faa:	91 c0       	rjmp	.+290    	; 0x10ce <LCD_Command+0x1aa>
	else if (__tmp > 255)
     fac:	6f 8d       	ldd	r22, Y+31	; 0x1f
     fae:	78 a1       	ldd	r23, Y+32	; 0x20
     fb0:	89 a1       	ldd	r24, Y+33	; 0x21
     fb2:	9a a1       	ldd	r25, Y+34	; 0x22
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	4f e7       	ldi	r20, 0x7F	; 127
     fba:	53 e4       	ldi	r21, 0x43	; 67
     fbc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
     fc0:	18 16       	cp	r1, r24
     fc2:	0c f0       	brlt	.+2      	; 0xfc6 <LCD_Command+0xa2>
     fc4:	7b c0       	rjmp	.+246    	; 0x10bc <LCD_Command+0x198>
	{
		_delay_ms(__us / 1000.0);
     fc6:	6b a1       	ldd	r22, Y+35	; 0x23
     fc8:	7c a1       	ldd	r23, Y+36	; 0x24
     fca:	8d a1       	ldd	r24, Y+37	; 0x25
     fcc:	9e a1       	ldd	r25, Y+38	; 0x26
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	4a e7       	ldi	r20, 0x7A	; 122
     fd4:	54 e4       	ldi	r21, 0x44	; 68
     fd6:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	8a 8f       	std	Y+26, r24	; 0x1a
     fe0:	9b 8f       	std	Y+27, r25	; 0x1b
     fe2:	ac 8f       	std	Y+28, r26	; 0x1c
     fe4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe6:	6a 8d       	ldd	r22, Y+26	; 0x1a
     fe8:	7b 8d       	ldd	r23, Y+27	; 0x1b
     fea:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fec:	9d 8d       	ldd	r25, Y+29	; 0x1d
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	4a ef       	ldi	r20, 0xFA	; 250
     ff4:	54 e4       	ldi	r21, 0x44	; 68
     ff6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	8e 8b       	std	Y+22, r24	; 0x16
    1000:	9f 8b       	std	Y+23, r25	; 0x17
    1002:	a8 8f       	std	Y+24, r26	; 0x18
    1004:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1006:	6e 89       	ldd	r22, Y+22	; 0x16
    1008:	7f 89       	ldd	r23, Y+23	; 0x17
    100a:	88 8d       	ldd	r24, Y+24	; 0x18
    100c:	99 8d       	ldd	r25, Y+25	; 0x19
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e8       	ldi	r20, 0x80	; 128
    1014:	5f e3       	ldi	r21, 0x3F	; 63
    1016:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    101a:	88 23       	and	r24, r24
    101c:	2c f4       	brge	.+10     	; 0x1028 <LCD_Command+0x104>
		__ticks = 1;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	9d 8b       	std	Y+21, r25	; 0x15
    1024:	8c 8b       	std	Y+20, r24	; 0x14
    1026:	3f c0       	rjmp	.+126    	; 0x10a6 <LCD_Command+0x182>
	else if (__tmp > 65535)
    1028:	6e 89       	ldd	r22, Y+22	; 0x16
    102a:	7f 89       	ldd	r23, Y+23	; 0x17
    102c:	88 8d       	ldd	r24, Y+24	; 0x18
    102e:	99 8d       	ldd	r25, Y+25	; 0x19
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	3f ef       	ldi	r19, 0xFF	; 255
    1034:	4f e7       	ldi	r20, 0x7F	; 127
    1036:	57 e4       	ldi	r21, 0x47	; 71
    1038:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    103c:	18 16       	cp	r1, r24
    103e:	4c f5       	brge	.+82     	; 0x1092 <LCD_Command+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1040:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1042:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1044:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1046:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e2       	ldi	r20, 0x20	; 32
    104e:	51 e4       	ldi	r21, 0x41	; 65
    1050:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	9d 8b       	std	Y+21, r25	; 0x15
    1066:	8c 8b       	std	Y+20, r24	; 0x14
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <LCD_Command+0x164>
    106a:	88 ec       	ldi	r24, 0xC8	; 200
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9b 8b       	std	Y+19, r25	; 0x13
    1070:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1072:	8a 89       	ldd	r24, Y+18	; 0x12
    1074:	9b 89       	ldd	r25, Y+19	; 0x13
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <LCD_Command+0x152>
    107a:	9b 8b       	std	Y+19, r25	; 0x13
    107c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107e:	8c 89       	ldd	r24, Y+20	; 0x14
    1080:	9d 89       	ldd	r25, Y+21	; 0x15
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	9d 8b       	std	Y+21, r25	; 0x15
    1086:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1088:	8c 89       	ldd	r24, Y+20	; 0x14
    108a:	9d 89       	ldd	r25, Y+21	; 0x15
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	69 f7       	brne	.-38     	; 0x106a <LCD_Command+0x146>
    1090:	24 c0       	rjmp	.+72     	; 0x10da <LCD_Command+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1092:	6e 89       	ldd	r22, Y+22	; 0x16
    1094:	7f 89       	ldd	r23, Y+23	; 0x17
    1096:	88 8d       	ldd	r24, Y+24	; 0x18
    1098:	99 8d       	ldd	r25, Y+25	; 0x19
    109a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	9d 8b       	std	Y+21, r25	; 0x15
    10a4:	8c 8b       	std	Y+20, r24	; 0x14
    10a6:	8c 89       	ldd	r24, Y+20	; 0x14
    10a8:	9d 89       	ldd	r25, Y+21	; 0x15
    10aa:	99 8b       	std	Y+17, r25	; 0x11
    10ac:	88 8b       	std	Y+16, r24	; 0x10
    10ae:	88 89       	ldd	r24, Y+16	; 0x10
    10b0:	99 89       	ldd	r25, Y+17	; 0x11
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <LCD_Command+0x18e>
    10b6:	99 8b       	std	Y+17, r25	; 0x11
    10b8:	88 8b       	std	Y+16, r24	; 0x10
    10ba:	0f c0       	rjmp	.+30     	; 0x10da <LCD_Command+0x1b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    10bc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    10be:	78 a1       	ldd	r23, Y+32	; 0x20
    10c0:	89 a1       	ldd	r24, Y+33	; 0x21
    10c2:	9a a1       	ldd	r25, Y+34	; 0x22
    10c4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	8e 8f       	std	Y+30, r24	; 0x1e
    10ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10d0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10d4:	8a 95       	dec	r24
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <LCD_Command+0x1b0>
    10d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
    10da:	a5 e3       	ldi	r26, 0x35	; 53
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e5 e3       	ldi	r30, 0x35	; 53
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8f 7e       	andi	r24, 0xEF	; 239
    10e6:	8c 93       	st	X, r24
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a0 e4       	ldi	r26, 0x40	; 64
    10ee:	b0 e4       	ldi	r27, 0x40	; 64
    10f0:	8b 87       	std	Y+11, r24	; 0x0b
    10f2:	9c 87       	std	Y+12, r25	; 0x0c
    10f4:	ad 87       	std	Y+13, r26	; 0x0d
    10f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	4a ef       	ldi	r20, 0xFA	; 250
    1106:	54 e4       	ldi	r21, 0x44	; 68
    1108:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	8f 83       	std	Y+7, r24	; 0x07
    1112:	98 87       	std	Y+8, r25	; 0x08
    1114:	a9 87       	std	Y+9, r26	; 0x09
    1116:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1118:	6f 81       	ldd	r22, Y+7	; 0x07
    111a:	78 85       	ldd	r23, Y+8	; 0x08
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e8       	ldi	r20, 0x80	; 128
    1126:	5f e3       	ldi	r21, 0x3F	; 63
    1128:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    112c:	88 23       	and	r24, r24
    112e:	2c f4       	brge	.+10     	; 0x113a <LCD_Command+0x216>
		__ticks = 1;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	9e 83       	std	Y+6, r25	; 0x06
    1136:	8d 83       	std	Y+5, r24	; 0x05
    1138:	3f c0       	rjmp	.+126    	; 0x11b8 <LCD_Command+0x294>
	else if (__tmp > 65535)
    113a:	6f 81       	ldd	r22, Y+7	; 0x07
    113c:	78 85       	ldd	r23, Y+8	; 0x08
    113e:	89 85       	ldd	r24, Y+9	; 0x09
    1140:	9a 85       	ldd	r25, Y+10	; 0x0a
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	3f ef       	ldi	r19, 0xFF	; 255
    1146:	4f e7       	ldi	r20, 0x7F	; 127
    1148:	57 e4       	ldi	r21, 0x47	; 71
    114a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    114e:	18 16       	cp	r1, r24
    1150:	4c f5       	brge	.+82     	; 0x11a4 <LCD_Command+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1152:	6b 85       	ldd	r22, Y+11	; 0x0b
    1154:	7c 85       	ldd	r23, Y+12	; 0x0c
    1156:	8d 85       	ldd	r24, Y+13	; 0x0d
    1158:	9e 85       	ldd	r25, Y+14	; 0x0e
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e2       	ldi	r20, 0x20	; 32
    1160:	51 e4       	ldi	r21, 0x41	; 65
    1162:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	bc 01       	movw	r22, r24
    116c:	cd 01       	movw	r24, r26
    116e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	9e 83       	std	Y+6, r25	; 0x06
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	0f c0       	rjmp	.+30     	; 0x119a <LCD_Command+0x276>
    117c:	88 ec       	ldi	r24, 0xC8	; 200
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	9c 83       	std	Y+4, r25	; 0x04
    1182:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <LCD_Command+0x264>
    118c:	9c 83       	std	Y+4, r25	; 0x04
    118e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1190:	8d 81       	ldd	r24, Y+5	; 0x05
    1192:	9e 81       	ldd	r25, Y+6	; 0x06
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	69 f7       	brne	.-38     	; 0x117c <LCD_Command+0x258>
    11a2:	14 c0       	rjmp	.+40     	; 0x11cc <LCD_Command+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a4:	6f 81       	ldd	r22, Y+7	; 0x07
    11a6:	78 85       	ldd	r23, Y+8	; 0x08
    11a8:	89 85       	ldd	r24, Y+9	; 0x09
    11aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ac:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	9e 83       	std	Y+6, r25	; 0x06
    11b6:	8d 83       	std	Y+5, r24	; 0x05
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	9a 83       	std	Y+2, r25	; 0x02
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	9a 81       	ldd	r25, Y+2	; 0x02
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <LCD_Command+0x2a0>
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);									/* Wait little bit */
}
    11cc:	a7 96       	adiw	r28, 0x27	; 39
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <LCD_Char>:

void LCD_Char (char char_data)						/* LCD data write function */
{
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	a7 97       	sbiw	r28, 0x27	; 39
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	de bf       	out	0x3e, r29	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	cd bf       	out	0x3d, r28	; 61
    11f2:	8f a3       	std	Y+39, r24	; 0x27
	LCD_Data_Port = char_data;						/* Write data to LCD data port */
    11f4:	eb e3       	ldi	r30, 0x3B	; 59
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	8f a1       	ldd	r24, Y+39	; 0x27
    11fa:	80 83       	st	Z, r24
	LCD_Command_Port &= ~(1<<RW);					/* Make RW LOW (Write) */
    11fc:	a5 e3       	ldi	r26, 0x35	; 53
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e5 e3       	ldi	r30, 0x35	; 53
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	8f 7d       	andi	r24, 0xDF	; 223
    1208:	8c 93       	st	X, r24
	LCD_Command_Port |= (1<<EN)|(1<<RS);			/* Make RS HIGH (data reg.) and High to Low transition on EN (Enable) */
    120a:	a5 e3       	ldi	r26, 0x35	; 53
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e5 e3       	ldi	r30, 0x35	; 53
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	80 65       	ori	r24, 0x50	; 80
    1216:	8c 93       	st	X, r24
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	a0 e8       	ldi	r26, 0x80	; 128
    121e:	bf e3       	ldi	r27, 0x3F	; 63
    1220:	8b a3       	std	Y+35, r24	; 0x23
    1222:	9c a3       	std	Y+36, r25	; 0x24
    1224:	ad a3       	std	Y+37, r26	; 0x25
    1226:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1228:	6b a1       	ldd	r22, Y+35	; 0x23
    122a:	7c a1       	ldd	r23, Y+36	; 0x24
    122c:	8d a1       	ldd	r24, Y+37	; 0x25
    122e:	9e a1       	ldd	r25, Y+38	; 0x26
    1230:	2b ea       	ldi	r18, 0xAB	; 171
    1232:	3a ea       	ldi	r19, 0xAA	; 170
    1234:	4a e2       	ldi	r20, 0x2A	; 42
    1236:	50 e4       	ldi	r21, 0x40	; 64
    1238:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	8f 8f       	std	Y+31, r24	; 0x1f
    1242:	98 a3       	std	Y+32, r25	; 0x20
    1244:	a9 a3       	std	Y+33, r26	; 0x21
    1246:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1248:	6f 8d       	ldd	r22, Y+31	; 0x1f
    124a:	78 a1       	ldd	r23, Y+32	; 0x20
    124c:	89 a1       	ldd	r24, Y+33	; 0x21
    124e:	9a a1       	ldd	r25, Y+34	; 0x22
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e8       	ldi	r20, 0x80	; 128
    1256:	5f e3       	ldi	r21, 0x3F	; 63
    1258:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    125c:	88 23       	and	r24, r24
    125e:	1c f4       	brge	.+6      	; 0x1266 <LCD_Char+0x88>
		__ticks = 1;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	8e 8f       	std	Y+30, r24	; 0x1e
    1264:	91 c0       	rjmp	.+290    	; 0x1388 <LCD_Char+0x1aa>
	else if (__tmp > 255)
    1266:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1268:	78 a1       	ldd	r23, Y+32	; 0x20
    126a:	89 a1       	ldd	r24, Y+33	; 0x21
    126c:	9a a1       	ldd	r25, Y+34	; 0x22
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	4f e7       	ldi	r20, 0x7F	; 127
    1274:	53 e4       	ldi	r21, 0x43	; 67
    1276:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    127a:	18 16       	cp	r1, r24
    127c:	0c f0       	brlt	.+2      	; 0x1280 <LCD_Char+0xa2>
    127e:	7b c0       	rjmp	.+246    	; 0x1376 <LCD_Char+0x198>
	{
		_delay_ms(__us / 1000.0);
    1280:	6b a1       	ldd	r22, Y+35	; 0x23
    1282:	7c a1       	ldd	r23, Y+36	; 0x24
    1284:	8d a1       	ldd	r24, Y+37	; 0x25
    1286:	9e a1       	ldd	r25, Y+38	; 0x26
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	4a e7       	ldi	r20, 0x7A	; 122
    128e:	54 e4       	ldi	r21, 0x44	; 68
    1290:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	8a 8f       	std	Y+26, r24	; 0x1a
    129a:	9b 8f       	std	Y+27, r25	; 0x1b
    129c:	ac 8f       	std	Y+28, r26	; 0x1c
    129e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    12a2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    12a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12a6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	4a ef       	ldi	r20, 0xFA	; 250
    12ae:	54 e4       	ldi	r21, 0x44	; 68
    12b0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	8e 8b       	std	Y+22, r24	; 0x16
    12ba:	9f 8b       	std	Y+23, r25	; 0x17
    12bc:	a8 8f       	std	Y+24, r26	; 0x18
    12be:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    12c0:	6e 89       	ldd	r22, Y+22	; 0x16
    12c2:	7f 89       	ldd	r23, Y+23	; 0x17
    12c4:	88 8d       	ldd	r24, Y+24	; 0x18
    12c6:	99 8d       	ldd	r25, Y+25	; 0x19
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e8       	ldi	r20, 0x80	; 128
    12ce:	5f e3       	ldi	r21, 0x3F	; 63
    12d0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    12d4:	88 23       	and	r24, r24
    12d6:	2c f4       	brge	.+10     	; 0x12e2 <LCD_Char+0x104>
		__ticks = 1;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9d 8b       	std	Y+21, r25	; 0x15
    12de:	8c 8b       	std	Y+20, r24	; 0x14
    12e0:	3f c0       	rjmp	.+126    	; 0x1360 <LCD_Char+0x182>
	else if (__tmp > 65535)
    12e2:	6e 89       	ldd	r22, Y+22	; 0x16
    12e4:	7f 89       	ldd	r23, Y+23	; 0x17
    12e6:	88 8d       	ldd	r24, Y+24	; 0x18
    12e8:	99 8d       	ldd	r25, Y+25	; 0x19
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	3f ef       	ldi	r19, 0xFF	; 255
    12ee:	4f e7       	ldi	r20, 0x7F	; 127
    12f0:	57 e4       	ldi	r21, 0x47	; 71
    12f2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    12f6:	18 16       	cp	r1, r24
    12f8:	4c f5       	brge	.+82     	; 0x134c <LCD_Char+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fa:	6a 8d       	ldd	r22, Y+26	; 0x1a
    12fc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    12fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1300:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e2       	ldi	r20, 0x20	; 32
    1308:	51 e4       	ldi	r21, 0x41	; 65
    130a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9d 8b       	std	Y+21, r25	; 0x15
    1320:	8c 8b       	std	Y+20, r24	; 0x14
    1322:	0f c0       	rjmp	.+30     	; 0x1342 <LCD_Char+0x164>
    1324:	88 ec       	ldi	r24, 0xC8	; 200
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9b 8b       	std	Y+19, r25	; 0x13
    132a:	8a 8b       	std	Y+18, r24	; 0x12
    132c:	8a 89       	ldd	r24, Y+18	; 0x12
    132e:	9b 89       	ldd	r25, Y+19	; 0x13
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <LCD_Char+0x152>
    1334:	9b 8b       	std	Y+19, r25	; 0x13
    1336:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1338:	8c 89       	ldd	r24, Y+20	; 0x14
    133a:	9d 89       	ldd	r25, Y+21	; 0x15
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	9d 8b       	std	Y+21, r25	; 0x15
    1340:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1342:	8c 89       	ldd	r24, Y+20	; 0x14
    1344:	9d 89       	ldd	r25, Y+21	; 0x15
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	69 f7       	brne	.-38     	; 0x1324 <LCD_Char+0x146>
    134a:	24 c0       	rjmp	.+72     	; 0x1394 <LCD_Char+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134c:	6e 89       	ldd	r22, Y+22	; 0x16
    134e:	7f 89       	ldd	r23, Y+23	; 0x17
    1350:	88 8d       	ldd	r24, Y+24	; 0x18
    1352:	99 8d       	ldd	r25, Y+25	; 0x19
    1354:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9d 8b       	std	Y+21, r25	; 0x15
    135e:	8c 8b       	std	Y+20, r24	; 0x14
    1360:	8c 89       	ldd	r24, Y+20	; 0x14
    1362:	9d 89       	ldd	r25, Y+21	; 0x15
    1364:	99 8b       	std	Y+17, r25	; 0x11
    1366:	88 8b       	std	Y+16, r24	; 0x10
    1368:	88 89       	ldd	r24, Y+16	; 0x10
    136a:	99 89       	ldd	r25, Y+17	; 0x11
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <LCD_Char+0x18e>
    1370:	99 8b       	std	Y+17, r25	; 0x11
    1372:	88 8b       	std	Y+16, r24	; 0x10
    1374:	0f c0       	rjmp	.+30     	; 0x1394 <LCD_Char+0x1b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1376:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1378:	78 a1       	ldd	r23, Y+32	; 0x20
    137a:	89 a1       	ldd	r24, Y+33	; 0x21
    137c:	9a a1       	ldd	r25, Y+34	; 0x22
    137e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	8e 8f       	std	Y+30, r24	; 0x1e
    1388:	8e 8d       	ldd	r24, Y+30	; 0x1e
    138a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    138c:	8f 85       	ldd	r24, Y+15	; 0x0f
    138e:	8a 95       	dec	r24
    1390:	f1 f7       	brne	.-4      	; 0x138e <LCD_Char+0x1b0>
    1392:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
    1394:	a5 e3       	ldi	r26, 0x35	; 53
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e5 e3       	ldi	r30, 0x35	; 53
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	8f 7e       	andi	r24, 0xEF	; 239
    13a0:	8c 93       	st	X, r24
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	a0 e8       	ldi	r26, 0x80	; 128
    13a8:	bf e3       	ldi	r27, 0x3F	; 63
    13aa:	8b 87       	std	Y+11, r24	; 0x0b
    13ac:	9c 87       	std	Y+12, r25	; 0x0c
    13ae:	ad 87       	std	Y+13, r26	; 0x0d
    13b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	4a ef       	ldi	r20, 0xFA	; 250
    13c0:	54 e4       	ldi	r21, 0x44	; 68
    13c2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	8f 83       	std	Y+7, r24	; 0x07
    13cc:	98 87       	std	Y+8, r25	; 0x08
    13ce:	a9 87       	std	Y+9, r26	; 0x09
    13d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13d2:	6f 81       	ldd	r22, Y+7	; 0x07
    13d4:	78 85       	ldd	r23, Y+8	; 0x08
    13d6:	89 85       	ldd	r24, Y+9	; 0x09
    13d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e8       	ldi	r20, 0x80	; 128
    13e0:	5f e3       	ldi	r21, 0x3F	; 63
    13e2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    13e6:	88 23       	and	r24, r24
    13e8:	2c f4       	brge	.+10     	; 0x13f4 <LCD_Char+0x216>
		__ticks = 1;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	9e 83       	std	Y+6, r25	; 0x06
    13f0:	8d 83       	std	Y+5, r24	; 0x05
    13f2:	3f c0       	rjmp	.+126    	; 0x1472 <LCD_Char+0x294>
	else if (__tmp > 65535)
    13f4:	6f 81       	ldd	r22, Y+7	; 0x07
    13f6:	78 85       	ldd	r23, Y+8	; 0x08
    13f8:	89 85       	ldd	r24, Y+9	; 0x09
    13fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	3f ef       	ldi	r19, 0xFF	; 255
    1400:	4f e7       	ldi	r20, 0x7F	; 127
    1402:	57 e4       	ldi	r21, 0x47	; 71
    1404:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1408:	18 16       	cp	r1, r24
    140a:	4c f5       	brge	.+82     	; 0x145e <LCD_Char+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140c:	6b 85       	ldd	r22, Y+11	; 0x0b
    140e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1410:	8d 85       	ldd	r24, Y+13	; 0x0d
    1412:	9e 85       	ldd	r25, Y+14	; 0x0e
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e2       	ldi	r20, 0x20	; 32
    141a:	51 e4       	ldi	r21, 0x41	; 65
    141c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	bc 01       	movw	r22, r24
    1426:	cd 01       	movw	r24, r26
    1428:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	9e 83       	std	Y+6, r25	; 0x06
    1432:	8d 83       	std	Y+5, r24	; 0x05
    1434:	0f c0       	rjmp	.+30     	; 0x1454 <LCD_Char+0x276>
    1436:	88 ec       	ldi	r24, 0xC8	; 200
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	9c 83       	std	Y+4, r25	; 0x04
    143c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	9c 81       	ldd	r25, Y+4	; 0x04
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <LCD_Char+0x264>
    1446:	9c 83       	std	Y+4, r25	; 0x04
    1448:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1454:	8d 81       	ldd	r24, Y+5	; 0x05
    1456:	9e 81       	ldd	r25, Y+6	; 0x06
    1458:	00 97       	sbiw	r24, 0x00	; 0
    145a:	69 f7       	brne	.-38     	; 0x1436 <LCD_Char+0x258>
    145c:	14 c0       	rjmp	.+40     	; 0x1486 <LCD_Char+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145e:	6f 81       	ldd	r22, Y+7	; 0x07
    1460:	78 85       	ldd	r23, Y+8	; 0x08
    1462:	89 85       	ldd	r24, Y+9	; 0x09
    1464:	9a 85       	ldd	r25, Y+10	; 0x0a
    1466:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 83       	std	Y+5, r24	; 0x05
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	9e 81       	ldd	r25, Y+6	; 0x06
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	9a 81       	ldd	r25, Y+2	; 0x02
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	f1 f7       	brne	.-4      	; 0x147e <LCD_Char+0x2a0>
    1482:	9a 83       	std	Y+2, r25	; 0x02
    1484:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);									/* Wait little bit */
}
    1486:	a7 96       	adiw	r28, 0x27	; 39
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <LCD_Init>:

void LCD_Init (void)								/* LCD Initialize function */
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	2e 97       	sbiw	r28, 0x0e	; 14
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
	LCD_Command_Dir |= (1<<RS)|(1<<RW)|(1<<EN);		/* Make LCD command port direction as o/p */
    14ac:	a4 e3       	ldi	r26, 0x34	; 52
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e4 e3       	ldi	r30, 0x34	; 52
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	80 67       	ori	r24, 0x70	; 112
    14b8:	8c 93       	st	X, r24
	LCD_Data_Dir = 0xFF;							/* Make LCD data port direction as o/p */
    14ba:	ea e3       	ldi	r30, 0x3A	; 58
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	8f ef       	ldi	r24, 0xFF	; 255
    14c0:	80 83       	st	Z, r24
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a0 ea       	ldi	r26, 0xA0	; 160
    14c8:	b1 e4       	ldi	r27, 0x41	; 65
    14ca:	8b 87       	std	Y+11, r24	; 0x0b
    14cc:	9c 87       	std	Y+12, r25	; 0x0c
    14ce:	ad 87       	std	Y+13, r26	; 0x0d
    14d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	4a ef       	ldi	r20, 0xFA	; 250
    14e0:	54 e4       	ldi	r21, 0x44	; 68
    14e2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	8f 83       	std	Y+7, r24	; 0x07
    14ec:	98 87       	std	Y+8, r25	; 0x08
    14ee:	a9 87       	std	Y+9, r26	; 0x09
    14f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14f2:	6f 81       	ldd	r22, Y+7	; 0x07
    14f4:	78 85       	ldd	r23, Y+8	; 0x08
    14f6:	89 85       	ldd	r24, Y+9	; 0x09
    14f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e8       	ldi	r20, 0x80	; 128
    1500:	5f e3       	ldi	r21, 0x3F	; 63
    1502:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1506:	88 23       	and	r24, r24
    1508:	2c f4       	brge	.+10     	; 0x1514 <LCD_Init+0x7c>
		__ticks = 1;
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9e 83       	std	Y+6, r25	; 0x06
    1510:	8d 83       	std	Y+5, r24	; 0x05
    1512:	3f c0       	rjmp	.+126    	; 0x1592 <LCD_Init+0xfa>
	else if (__tmp > 65535)
    1514:	6f 81       	ldd	r22, Y+7	; 0x07
    1516:	78 85       	ldd	r23, Y+8	; 0x08
    1518:	89 85       	ldd	r24, Y+9	; 0x09
    151a:	9a 85       	ldd	r25, Y+10	; 0x0a
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	3f ef       	ldi	r19, 0xFF	; 255
    1520:	4f e7       	ldi	r20, 0x7F	; 127
    1522:	57 e4       	ldi	r21, 0x47	; 71
    1524:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1528:	18 16       	cp	r1, r24
    152a:	4c f5       	brge	.+82     	; 0x157e <LCD_Init+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152c:	6b 85       	ldd	r22, Y+11	; 0x0b
    152e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1530:	8d 85       	ldd	r24, Y+13	; 0x0d
    1532:	9e 85       	ldd	r25, Y+14	; 0x0e
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	40 e2       	ldi	r20, 0x20	; 32
    153a:	51 e4       	ldi	r21, 0x41	; 65
    153c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	bc 01       	movw	r22, r24
    1546:	cd 01       	movw	r24, r26
    1548:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	9e 83       	std	Y+6, r25	; 0x06
    1552:	8d 83       	std	Y+5, r24	; 0x05
    1554:	0f c0       	rjmp	.+30     	; 0x1574 <LCD_Init+0xdc>
    1556:	88 ec       	ldi	r24, 0xC8	; 200
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <LCD_Init+0xca>
    1566:	9c 83       	std	Y+4, r25	; 0x04
    1568:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156a:	8d 81       	ldd	r24, Y+5	; 0x05
    156c:	9e 81       	ldd	r25, Y+6	; 0x06
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	9e 83       	std	Y+6, r25	; 0x06
    1572:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	69 f7       	brne	.-38     	; 0x1556 <LCD_Init+0xbe>
    157c:	14 c0       	rjmp	.+40     	; 0x15a6 <LCD_Init+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157e:	6f 81       	ldd	r22, Y+7	; 0x07
    1580:	78 85       	ldd	r23, Y+8	; 0x08
    1582:	89 85       	ldd	r24, Y+9	; 0x09
    1584:	9a 85       	ldd	r25, Y+10	; 0x0a
    1586:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	9e 83       	std	Y+6, r25	; 0x06
    1590:	8d 83       	std	Y+5, r24	; 0x05
    1592:	8d 81       	ldd	r24, Y+5	; 0x05
    1594:	9e 81       	ldd	r25, Y+6	; 0x06
    1596:	9a 83       	std	Y+2, r25	; 0x02
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	9a 81       	ldd	r25, Y+2	; 0x02
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <LCD_Init+0x106>
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);									/* LCD power up time to get things ready, it should always >15ms */
	LCD_Command (0x38);								/* Initialize 16X2 LCD in 8bit mode */
    15a6:	88 e3       	ldi	r24, 0x38	; 56
    15a8:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_Command>
	LCD_Command (0x0C);								/* Display ON, Cursor OFF command */
    15ac:	8c e0       	ldi	r24, 0x0C	; 12
    15ae:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_Command>
	LCD_Command (0x06);								/* Auto Increment cursor */
    15b2:	86 e0       	ldi	r24, 0x06	; 6
    15b4:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_Command>
	LCD_Command (0x01);								/* Clear LCD command */
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_Command>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
    15be:	80 e8       	ldi	r24, 0x80	; 128
    15c0:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_Command>
}
    15c4:	2e 96       	adiw	r28, 0x0e	; 14
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	cd bf       	out	0x3d, r28	; 61
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <LCD_String>:

void LCD_String (char *str)							/* Send string to LCD function */
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	00 d0       	rcall	.+0      	; 0x15dc <LCD_String+0x6>
    15dc:	00 d0       	rcall	.+0      	; 0x15de <LCD_String+0x8>
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
    15e6:	1a 82       	std	Y+2, r1	; 0x02
    15e8:	19 82       	std	Y+1, r1	; 0x01
    15ea:	0f c0       	rjmp	.+30     	; 0x160a <LCD_String+0x34>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
    15ec:	29 81       	ldd	r18, Y+1	; 0x01
    15ee:	3a 81       	ldd	r19, Y+2	; 0x02
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	fc 01       	movw	r30, r24
    15f6:	e2 0f       	add	r30, r18
    15f8:	f3 1f       	adc	r31, r19
    15fa:	80 81       	ld	r24, Z
    15fc:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_Char>
}

void LCD_String (char *str)							/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	89 83       	std	Y+1, r24	; 0x01
    160a:	29 81       	ldd	r18, Y+1	; 0x01
    160c:	3a 81       	ldd	r19, Y+2	; 0x02
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	fc 01       	movw	r30, r24
    1614:	e2 0f       	add	r30, r18
    1616:	f3 1f       	adc	r31, r19
    1618:	80 81       	ld	r24, Z
    161a:	88 23       	and	r24, r24
    161c:	39 f7       	brne	.-50     	; 0x15ec <LCD_String+0x16>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD function */
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	00 d0       	rcall	.+0      	; 0x1632 <LCD_String_xy+0x6>
    1632:	00 d0       	rcall	.+0      	; 0x1634 <LCD_String_xy+0x8>
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	89 83       	std	Y+1, r24	; 0x01
    163a:	6a 83       	std	Y+2, r22	; 0x02
    163c:	5c 83       	std	Y+4, r21	; 0x04
    163e:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 1)
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	31 f4       	brne	.+12     	; 0x1652 <LCD_String_xy+0x26>
		LCD_Command((pos & 0x0F)|0x80);				/* Command of first row and required position<16 */
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	8f 70       	andi	r24, 0x0F	; 15
    164a:	80 68       	ori	r24, 0x80	; 128
    164c:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_Command>
    1650:	08 c0       	rjmp	.+16     	; 0x1662 <LCD_String_xy+0x36>
	else if (row == 2)
    1652:	89 81       	ldd	r24, Y+1	; 0x01
    1654:	82 30       	cpi	r24, 0x02	; 2
    1656:	29 f4       	brne	.+10     	; 0x1662 <LCD_String_xy+0x36>
		LCD_Command((pos & 0x0F)|0xC0);				/* Command of Second row and required position<16 */
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	8f 70       	andi	r24, 0x0F	; 15
    165c:	80 6c       	ori	r24, 0xC0	; 192
    165e:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_Command>
	LCD_String(str);								/* Call LCD string function */
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	9c 81       	ldd	r25, Y+4	; 0x04
    1666:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <LCD_String>
}
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <LCD_Clear>:

void LCD_Clear (void)								/* LCD clear function */
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	LCD_Command (0x01);								/* Clear LCD command */
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_Command>
	LCD_Command (0x80);								/* 8 is for first line and 0 is for 0th position */
    1686:	80 e8       	ldi	r24, 0x80	; 128
    1688:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_Command>
}
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <uart_init>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include "UART.h"

void uart_init(){
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62

	UCSRA |= (1<<1);
    169a:	ab e2       	ldi	r26, 0x2B	; 43
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	eb e2       	ldi	r30, 0x2B	; 43
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	82 60       	ori	r24, 0x02	; 2
    16a6:	8c 93       	st	X, r24

	UCSRB = (1<<3) | (1<<4) ;
    16a8:	ea e2       	ldi	r30, 0x2A	; 42
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	88 e1       	ldi	r24, 0x18	; 24
    16ae:	80 83       	st	Z, r24

	UCSRC = (1<<URSEL) | (1<<UCSZ1) |(1<<UCSZ0) ;
    16b0:	e0 e4       	ldi	r30, 0x40	; 64
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	86 e8       	ldi	r24, 0x86	; 134
    16b6:	80 83       	st	Z, r24
UBRRL =12;
    16b8:	e9 e2       	ldi	r30, 0x29	; 41
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	8c e0       	ldi	r24, 0x0C	; 12
    16be:	80 83       	st	Z, r24
}
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <uart_sendbyte>:

void uart_sendbyte(unsigned char data ){
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	0f 92       	push	r0
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	89 83       	std	Y+1, r24	; 0x01

while (UCSRA &= ~(1<<UDRE));
    16d2:	ab e2       	ldi	r26, 0x2B	; 43
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	eb e2       	ldi	r30, 0x2B	; 43
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8f 7d       	andi	r24, 0xDF	; 223
    16de:	8c 93       	st	X, r24
    16e0:	8c 91       	ld	r24, X
    16e2:	88 23       	and	r24, r24
    16e4:	b1 f7       	brne	.-20     	; 0x16d2 <uart_sendbyte+0xc>

UDR = data;
    16e6:	ec e2       	ldi	r30, 0x2C	; 44
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	80 83       	st	Z, r24

}
    16ee:	0f 90       	pop	r0
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <uart_receivebyte>:

unsigned char uart_receivebyte(){
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62

while (UCSRA &=~(1<<RXC));
    16fe:	ab e2       	ldi	r26, 0x2B	; 43
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	eb e2       	ldi	r30, 0x2B	; 43
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	8f 77       	andi	r24, 0x7F	; 127
    170a:	8c 93       	st	X, r24
    170c:	8c 91       	ld	r24, X
    170e:	88 23       	and	r24, r24
    1710:	b1 f7       	brne	.-20     	; 0x16fe <uart_receivebyte+0x8>


return UDR;
    1712:	ec e2       	ldi	r30, 0x2C	; 44
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
}
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <__vector_8>:
unsigned char left_dis =0;
unsigned char right_dis =0;


ISR(TIMER1_OVF_vect)
{
    171e:	1f 92       	push	r1
    1720:	0f 92       	push	r0
    1722:	0f b6       	in	r0, 0x3f	; 63
    1724:	0f 92       	push	r0
    1726:	11 24       	eor	r1, r1
    1728:	8f 93       	push	r24
    172a:	9f 93       	push	r25
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
	TimerOverflow++;	/* Increment Timer Overflow count */
    1734:	80 91 82 01 	lds	r24, 0x0182
    1738:	90 91 83 01 	lds	r25, 0x0183
    173c:	01 96       	adiw	r24, 0x01	; 1
    173e:	90 93 83 01 	sts	0x0183, r25
    1742:	80 93 82 01 	sts	0x0182, r24
}
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	9f 91       	pop	r25
    174c:	8f 91       	pop	r24
    174e:	0f 90       	pop	r0
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	0f 90       	pop	r0
    1754:	1f 90       	pop	r1
    1756:	18 95       	reti

00001758 <__vector_1>:

ISR(INT0_vect){
    1758:	1f 92       	push	r1
    175a:	0f 92       	push	r0
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	0f 92       	push	r0
    1760:	11 24       	eor	r1, r1
    1762:	2f 93       	push	r18
    1764:	3f 93       	push	r19
    1766:	4f 93       	push	r20
    1768:	5f 93       	push	r21
    176a:	6f 93       	push	r22
    176c:	7f 93       	push	r23
    176e:	8f 93       	push	r24
    1770:	9f 93       	push	r25
    1772:	af 93       	push	r26
    1774:	bf 93       	push	r27
    1776:	ef 93       	push	r30
    1778:	ff 93       	push	r31
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	e8 97       	sbiw	r28, 0x38	; 56
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	cd bf       	out	0x3d, r28	; 61

	pwm1(0);
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <pwm1>
	pwm2(0);
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <pwm2>
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	aa e7       	ldi	r26, 0x7A	; 122
    179a:	b4 e4       	ldi	r27, 0x44	; 68
    179c:	8d ab       	std	Y+53, r24	; 0x35
    179e:	9e ab       	std	Y+54, r25	; 0x36
    17a0:	af ab       	std	Y+55, r26	; 0x37
    17a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a4:	6d a9       	ldd	r22, Y+53	; 0x35
    17a6:	7e a9       	ldd	r23, Y+54	; 0x36
    17a8:	8f a9       	ldd	r24, Y+55	; 0x37
    17aa:	98 ad       	ldd	r25, Y+56	; 0x38
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	4a e7       	ldi	r20, 0x7A	; 122
    17b2:	53 e4       	ldi	r21, 0x43	; 67
    17b4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	89 ab       	std	Y+49, r24	; 0x31
    17be:	9a ab       	std	Y+50, r25	; 0x32
    17c0:	ab ab       	std	Y+51, r26	; 0x33
    17c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17c4:	69 a9       	ldd	r22, Y+49	; 0x31
    17c6:	7a a9       	ldd	r23, Y+50	; 0x32
    17c8:	8b a9       	ldd	r24, Y+51	; 0x33
    17ca:	9c a9       	ldd	r25, Y+52	; 0x34
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    17d8:	88 23       	and	r24, r24
    17da:	2c f4       	brge	.+10     	; 0x17e6 <__vector_1+0x8e>
		__ticks = 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	98 ab       	std	Y+48, r25	; 0x30
    17e2:	8f a7       	std	Y+47, r24	; 0x2f
    17e4:	3f c0       	rjmp	.+126    	; 0x1864 <__vector_1+0x10c>
	else if (__tmp > 65535)
    17e6:	69 a9       	ldd	r22, Y+49	; 0x31
    17e8:	7a a9       	ldd	r23, Y+50	; 0x32
    17ea:	8b a9       	ldd	r24, Y+51	; 0x33
    17ec:	9c a9       	ldd	r25, Y+52	; 0x34
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	3f ef       	ldi	r19, 0xFF	; 255
    17f2:	4f e7       	ldi	r20, 0x7F	; 127
    17f4:	57 e4       	ldi	r21, 0x47	; 71
    17f6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    17fa:	18 16       	cp	r1, r24
    17fc:	4c f5       	brge	.+82     	; 0x1850 <__vector_1+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1800:	7e a9       	ldd	r23, Y+54	; 0x36
    1802:	8f a9       	ldd	r24, Y+55	; 0x37
    1804:	98 ad       	ldd	r25, Y+56	; 0x38
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e2       	ldi	r20, 0x20	; 32
    180c:	51 e4       	ldi	r21, 0x41	; 65
    180e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	98 ab       	std	Y+48, r25	; 0x30
    1824:	8f a7       	std	Y+47, r24	; 0x2f
    1826:	0f c0       	rjmp	.+30     	; 0x1846 <__vector_1+0xee>
    1828:	89 e1       	ldi	r24, 0x19	; 25
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9e a7       	std	Y+46, r25	; 0x2e
    182e:	8d a7       	std	Y+45, r24	; 0x2d
    1830:	8d a5       	ldd	r24, Y+45	; 0x2d
    1832:	9e a5       	ldd	r25, Y+46	; 0x2e
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <__vector_1+0xdc>
    1838:	9e a7       	std	Y+46, r25	; 0x2e
    183a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183c:	8f a5       	ldd	r24, Y+47	; 0x2f
    183e:	98 a9       	ldd	r25, Y+48	; 0x30
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	98 ab       	std	Y+48, r25	; 0x30
    1844:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1846:	8f a5       	ldd	r24, Y+47	; 0x2f
    1848:	98 a9       	ldd	r25, Y+48	; 0x30
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	69 f7       	brne	.-38     	; 0x1828 <__vector_1+0xd0>
    184e:	14 c0       	rjmp	.+40     	; 0x1878 <__vector_1+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1850:	69 a9       	ldd	r22, Y+49	; 0x31
    1852:	7a a9       	ldd	r23, Y+50	; 0x32
    1854:	8b a9       	ldd	r24, Y+51	; 0x33
    1856:	9c a9       	ldd	r25, Y+52	; 0x34
    1858:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	98 ab       	std	Y+48, r25	; 0x30
    1862:	8f a7       	std	Y+47, r24	; 0x2f
    1864:	8f a5       	ldd	r24, Y+47	; 0x2f
    1866:	98 a9       	ldd	r25, Y+48	; 0x30
    1868:	9c a7       	std	Y+44, r25	; 0x2c
    186a:	8b a7       	std	Y+43, r24	; 0x2b
    186c:	8b a5       	ldd	r24, Y+43	; 0x2b
    186e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <__vector_1+0x118>
    1874:	9c a7       	std	Y+44, r25	; 0x2c
    1876:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	/*
	 * CHECK IF THERE IS AN OBSTACLE IN THE RIGHT while the black line is in front of the car
	 */
	if (PIND & (1<<3)){
    1878:	e0 e3       	ldi	r30, 0x30	; 48
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	88 2f       	mov	r24, r24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	88 70       	andi	r24, 0x08	; 8
    1884:	90 70       	andi	r25, 0x00	; 0
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	09 f4       	brne	.+2      	; 0x188c <__vector_1+0x134>
    188a:	79 c0       	rjmp	.+242    	; 0x197e <__vector_1+0x226>
		/*
		 * turn to the left
		 */
		pwm2_backward(250); //left motor
    188c:	8a ef       	ldi	r24, 0xFA	; 250
    188e:	0e 94 44 17 	call	0x2e88	; 0x2e88 <pwm2_backward>
		pwm1_backward(100); // right motor
    1892:	84 e6       	ldi	r24, 0x64	; 100
    1894:	0e 94 01 17 	call	0x2e02	; 0x2e02 <pwm1_backward>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	aa ef       	ldi	r26, 0xFA	; 250
    189e:	b4 e4       	ldi	r27, 0x44	; 68
    18a0:	8f a3       	std	Y+39, r24	; 0x27
    18a2:	98 a7       	std	Y+40, r25	; 0x28
    18a4:	a9 a7       	std	Y+41, r26	; 0x29
    18a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a8:	6f a1       	ldd	r22, Y+39	; 0x27
    18aa:	78 a5       	ldd	r23, Y+40	; 0x28
    18ac:	89 a5       	ldd	r24, Y+41	; 0x29
    18ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	4a e7       	ldi	r20, 0x7A	; 122
    18b6:	53 e4       	ldi	r21, 0x43	; 67
    18b8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	8b a3       	std	Y+35, r24	; 0x23
    18c2:	9c a3       	std	Y+36, r25	; 0x24
    18c4:	ad a3       	std	Y+37, r26	; 0x25
    18c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18c8:	6b a1       	ldd	r22, Y+35	; 0x23
    18ca:	7c a1       	ldd	r23, Y+36	; 0x24
    18cc:	8d a1       	ldd	r24, Y+37	; 0x25
    18ce:	9e a1       	ldd	r25, Y+38	; 0x26
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e8       	ldi	r20, 0x80	; 128
    18d6:	5f e3       	ldi	r21, 0x3F	; 63
    18d8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    18dc:	88 23       	and	r24, r24
    18de:	2c f4       	brge	.+10     	; 0x18ea <__vector_1+0x192>
		__ticks = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9a a3       	std	Y+34, r25	; 0x22
    18e6:	89 a3       	std	Y+33, r24	; 0x21
    18e8:	3f c0       	rjmp	.+126    	; 0x1968 <__vector_1+0x210>
	else if (__tmp > 65535)
    18ea:	6b a1       	ldd	r22, Y+35	; 0x23
    18ec:	7c a1       	ldd	r23, Y+36	; 0x24
    18ee:	8d a1       	ldd	r24, Y+37	; 0x25
    18f0:	9e a1       	ldd	r25, Y+38	; 0x26
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	3f ef       	ldi	r19, 0xFF	; 255
    18f6:	4f e7       	ldi	r20, 0x7F	; 127
    18f8:	57 e4       	ldi	r21, 0x47	; 71
    18fa:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    18fe:	18 16       	cp	r1, r24
    1900:	4c f5       	brge	.+82     	; 0x1954 <__vector_1+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1902:	6f a1       	ldd	r22, Y+39	; 0x27
    1904:	78 a5       	ldd	r23, Y+40	; 0x28
    1906:	89 a5       	ldd	r24, Y+41	; 0x29
    1908:	9a a5       	ldd	r25, Y+42	; 0x2a
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e2       	ldi	r20, 0x20	; 32
    1910:	51 e4       	ldi	r21, 0x41	; 65
    1912:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	bc 01       	movw	r22, r24
    191c:	cd 01       	movw	r24, r26
    191e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9a a3       	std	Y+34, r25	; 0x22
    1928:	89 a3       	std	Y+33, r24	; 0x21
    192a:	0f c0       	rjmp	.+30     	; 0x194a <__vector_1+0x1f2>
    192c:	89 e1       	ldi	r24, 0x19	; 25
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	98 a3       	std	Y+32, r25	; 0x20
    1932:	8f 8f       	std	Y+31, r24	; 0x1f
    1934:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1936:	98 a1       	ldd	r25, Y+32	; 0x20
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <__vector_1+0x1e0>
    193c:	98 a3       	std	Y+32, r25	; 0x20
    193e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1940:	89 a1       	ldd	r24, Y+33	; 0x21
    1942:	9a a1       	ldd	r25, Y+34	; 0x22
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	9a a3       	std	Y+34, r25	; 0x22
    1948:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194a:	89 a1       	ldd	r24, Y+33	; 0x21
    194c:	9a a1       	ldd	r25, Y+34	; 0x22
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	69 f7       	brne	.-38     	; 0x192c <__vector_1+0x1d4>
    1952:	10 c1       	rjmp	.+544    	; 0x1b74 <__vector_1+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1954:	6b a1       	ldd	r22, Y+35	; 0x23
    1956:	7c a1       	ldd	r23, Y+36	; 0x24
    1958:	8d a1       	ldd	r24, Y+37	; 0x25
    195a:	9e a1       	ldd	r25, Y+38	; 0x26
    195c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9a a3       	std	Y+34, r25	; 0x22
    1966:	89 a3       	std	Y+33, r24	; 0x21
    1968:	89 a1       	ldd	r24, Y+33	; 0x21
    196a:	9a a1       	ldd	r25, Y+34	; 0x22
    196c:	9e 8f       	std	Y+30, r25	; 0x1e
    196e:	8d 8f       	std	Y+29, r24	; 0x1d
    1970:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1972:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <__vector_1+0x21c>
    1978:	9e 8f       	std	Y+30, r25	; 0x1e
    197a:	8d 8f       	std	Y+29, r24	; 0x1d
    197c:	fb c0       	rjmp	.+502    	; 0x1b74 <__vector_1+0x41c>
}

	/*
* CHECK IF THERE IS AN OBSTACLE IN THE RIGHT while the black line is in front of the car
		 */
	else if (PINB & (1<<4)){
    197e:	e6 e3       	ldi	r30, 0x36	; 54
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	88 2f       	mov	r24, r24
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	80 71       	andi	r24, 0x10	; 16
    198a:	90 70       	andi	r25, 0x00	; 0
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	09 f4       	brne	.+2      	; 0x1992 <__vector_1+0x23a>
    1990:	79 c0       	rjmp	.+242    	; 0x1a84 <__vector_1+0x32c>
		/*
		 * TURN RIGHT
		 */
		pwm2_backward(100); //left motor
    1992:	84 e6       	ldi	r24, 0x64	; 100
    1994:	0e 94 44 17 	call	0x2e88	; 0x2e88 <pwm2_backward>
		pwm1_backward(250); // right motor
    1998:	8a ef       	ldi	r24, 0xFA	; 250
    199a:	0e 94 01 17 	call	0x2e02	; 0x2e02 <pwm1_backward>
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	aa ef       	ldi	r26, 0xFA	; 250
    19a4:	b4 e4       	ldi	r27, 0x44	; 68
    19a6:	89 8f       	std	Y+25, r24	; 0x19
    19a8:	9a 8f       	std	Y+26, r25	; 0x1a
    19aa:	ab 8f       	std	Y+27, r26	; 0x1b
    19ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ae:	69 8d       	ldd	r22, Y+25	; 0x19
    19b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	4a e7       	ldi	r20, 0x7A	; 122
    19bc:	53 e4       	ldi	r21, 0x43	; 67
    19be:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	8d 8b       	std	Y+21, r24	; 0x15
    19c8:	9e 8b       	std	Y+22, r25	; 0x16
    19ca:	af 8b       	std	Y+23, r26	; 0x17
    19cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19ce:	6d 89       	ldd	r22, Y+21	; 0x15
    19d0:	7e 89       	ldd	r23, Y+22	; 0x16
    19d2:	8f 89       	ldd	r24, Y+23	; 0x17
    19d4:	98 8d       	ldd	r25, Y+24	; 0x18
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e8       	ldi	r20, 0x80	; 128
    19dc:	5f e3       	ldi	r21, 0x3F	; 63
    19de:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    19e2:	88 23       	and	r24, r24
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <__vector_1+0x298>
		__ticks = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9c 8b       	std	Y+20, r25	; 0x14
    19ec:	8b 8b       	std	Y+19, r24	; 0x13
    19ee:	3f c0       	rjmp	.+126    	; 0x1a6e <__vector_1+0x316>
	else if (__tmp > 65535)
    19f0:	6d 89       	ldd	r22, Y+21	; 0x15
    19f2:	7e 89       	ldd	r23, Y+22	; 0x16
    19f4:	8f 89       	ldd	r24, Y+23	; 0x17
    19f6:	98 8d       	ldd	r25, Y+24	; 0x18
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	4f e7       	ldi	r20, 0x7F	; 127
    19fe:	57 e4       	ldi	r21, 0x47	; 71
    1a00:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1a04:	18 16       	cp	r1, r24
    1a06:	4c f5       	brge	.+82     	; 0x1a5a <__vector_1+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a08:	69 8d       	ldd	r22, Y+25	; 0x19
    1a0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e2       	ldi	r20, 0x20	; 32
    1a16:	51 e4       	ldi	r21, 0x41	; 65
    1a18:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	bc 01       	movw	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	9c 8b       	std	Y+20, r25	; 0x14
    1a2e:	8b 8b       	std	Y+19, r24	; 0x13
    1a30:	0f c0       	rjmp	.+30     	; 0x1a50 <__vector_1+0x2f8>
    1a32:	89 e1       	ldi	r24, 0x19	; 25
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	9a 8b       	std	Y+18, r25	; 0x12
    1a38:	89 8b       	std	Y+17, r24	; 0x11
    1a3a:	89 89       	ldd	r24, Y+17	; 0x11
    1a3c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <__vector_1+0x2e6>
    1a42:	9a 8b       	std	Y+18, r25	; 0x12
    1a44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a46:	8b 89       	ldd	r24, Y+19	; 0x13
    1a48:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	9c 8b       	std	Y+20, r25	; 0x14
    1a4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a50:	8b 89       	ldd	r24, Y+19	; 0x13
    1a52:	9c 89       	ldd	r25, Y+20	; 0x14
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	69 f7       	brne	.-38     	; 0x1a32 <__vector_1+0x2da>
    1a58:	8d c0       	rjmp	.+282    	; 0x1b74 <__vector_1+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a60:	98 8d       	ldd	r25, Y+24	; 0x18
    1a62:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9c 8b       	std	Y+20, r25	; 0x14
    1a6c:	8b 8b       	std	Y+19, r24	; 0x13
    1a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a70:	9c 89       	ldd	r25, Y+20	; 0x14
    1a72:	98 8b       	std	Y+16, r25	; 0x10
    1a74:	8f 87       	std	Y+15, r24	; 0x0f
    1a76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a78:	98 89       	ldd	r25, Y+16	; 0x10
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	f1 f7       	brne	.-4      	; 0x1a7a <__vector_1+0x322>
    1a7e:	98 8b       	std	Y+16, r25	; 0x10
    1a80:	8f 87       	std	Y+15, r24	; 0x0f
    1a82:	78 c0       	rjmp	.+240    	; 0x1b74 <__vector_1+0x41c>
/*
 * if there is no obstacle while the black line is in front of the car
 * turn right
 * or you the car could turn left but i chose right
 */
		pwm2_backward(100); //left motor
    1a84:	84 e6       	ldi	r24, 0x64	; 100
    1a86:	0e 94 44 17 	call	0x2e88	; 0x2e88 <pwm2_backward>
		pwm1_backward(250); // right motor
    1a8a:	8a ef       	ldi	r24, 0xFA	; 250
    1a8c:	0e 94 01 17 	call	0x2e02	; 0x2e02 <pwm1_backward>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	aa ef       	ldi	r26, 0xFA	; 250
    1a96:	b4 e4       	ldi	r27, 0x44	; 68
    1a98:	8b 87       	std	Y+11, r24	; 0x0b
    1a9a:	9c 87       	std	Y+12, r25	; 0x0c
    1a9c:	ad 87       	std	Y+13, r26	; 0x0d
    1a9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	4a e7       	ldi	r20, 0x7A	; 122
    1aae:	53 e4       	ldi	r21, 0x43	; 67
    1ab0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	8f 83       	std	Y+7, r24	; 0x07
    1aba:	98 87       	std	Y+8, r25	; 0x08
    1abc:	a9 87       	std	Y+9, r26	; 0x09
    1abe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac2:	78 85       	ldd	r23, Y+8	; 0x08
    1ac4:	89 85       	ldd	r24, Y+9	; 0x09
    1ac6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e8       	ldi	r20, 0x80	; 128
    1ace:	5f e3       	ldi	r21, 0x3F	; 63
    1ad0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	2c f4       	brge	.+10     	; 0x1ae2 <__vector_1+0x38a>
		__ticks = 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	3f c0       	rjmp	.+126    	; 0x1b60 <__vector_1+0x408>
	else if (__tmp > 65535)
    1ae2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae4:	78 85       	ldd	r23, Y+8	; 0x08
    1ae6:	89 85       	ldd	r24, Y+9	; 0x09
    1ae8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	3f ef       	ldi	r19, 0xFF	; 255
    1aee:	4f e7       	ldi	r20, 0x7F	; 127
    1af0:	57 e4       	ldi	r21, 0x47	; 71
    1af2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1af6:	18 16       	cp	r1, r24
    1af8:	4c f5       	brge	.+82     	; 0x1b4c <__vector_1+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e2       	ldi	r20, 0x20	; 32
    1b08:	51 e4       	ldi	r21, 0x41	; 65
    1b0a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	9e 83       	std	Y+6, r25	; 0x06
    1b20:	8d 83       	std	Y+5, r24	; 0x05
    1b22:	0f c0       	rjmp	.+30     	; 0x1b42 <__vector_1+0x3ea>
    1b24:	89 e1       	ldi	r24, 0x19	; 25
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9c 83       	std	Y+4, r25	; 0x04
    1b2a:	8b 83       	std	Y+3, r24	; 0x03
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <__vector_1+0x3d8>
    1b34:	9c 83       	std	Y+4, r25	; 0x04
    1b36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b38:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	9e 81       	ldd	r25, Y+6	; 0x06
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	69 f7       	brne	.-38     	; 0x1b24 <__vector_1+0x3cc>
    1b4a:	14 c0       	rjmp	.+40     	; 0x1b74 <__vector_1+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4e:	78 85       	ldd	r23, Y+8	; 0x08
    1b50:	89 85       	ldd	r24, Y+9	; 0x09
    1b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b54:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	9e 83       	std	Y+6, r25	; 0x06
    1b5e:	8d 83       	std	Y+5, r24	; 0x05
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
    1b62:	9e 81       	ldd	r25, Y+6	; 0x06
    1b64:	9a 83       	std	Y+2, r25	; 0x02
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <__vector_1+0x414>
    1b70:	9a 83       	std	Y+2, r25	; 0x02
    1b72:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);


	}

}
    1b74:	e8 96       	adiw	r28, 0x38	; 56
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	cf 91       	pop	r28
    1b7c:	df 91       	pop	r29
    1b7e:	ff 91       	pop	r31
    1b80:	ef 91       	pop	r30
    1b82:	bf 91       	pop	r27
    1b84:	af 91       	pop	r26
    1b86:	9f 91       	pop	r25
    1b88:	8f 91       	pop	r24
    1b8a:	7f 91       	pop	r23
    1b8c:	6f 91       	pop	r22
    1b8e:	5f 91       	pop	r21
    1b90:	4f 91       	pop	r20
    1b92:	3f 91       	pop	r19
    1b94:	2f 91       	pop	r18
    1b96:	0f 90       	pop	r0
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	0f 90       	pop	r0
    1b9c:	1f 90       	pop	r1
    1b9e:	18 95       	reti

00001ba0 <main>:



int main (){
    1ba0:	ef 92       	push	r14
    1ba2:	ff 92       	push	r15
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	cd b7       	in	r28, 0x3d	; 61
    1bae:	de b7       	in	r29, 0x3e	; 62
    1bb0:	c6 5b       	subi	r28, 0xB6	; 182
    1bb2:	d0 40       	sbci	r29, 0x00	; 0
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61

	char string[10];
	long count;
	double distance;
DDRB = 0x01;		// make trigger pin as output
    1bbe:	e7 e3       	ldi	r30, 0x37	; 55
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	80 83       	st	Z, r24
PORTD |= (1<<6);		/* Turn on Pull-up for the echo pin */
    1bc6:	a2 e3       	ldi	r26, 0x32	; 50
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e2 e3       	ldi	r30, 0x32	; 50
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	80 64       	ori	r24, 0x40	; 64
    1bd2:	8c 93       	st	X, r24

DDRC = 0x0F; //MOTOR
    1bd4:	e4 e3       	ldi	r30, 0x34	; 52
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	8f e0       	ldi	r24, 0x0F	; 15
    1bda:	80 83       	st	Z, r24
PORTC =0x00;
    1bdc:	e5 e3       	ldi	r30, 0x35	; 53
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	10 82       	st	Z, r1


DDRD &= ~(1<<2); // front sensors as input
    1be2:	a1 e3       	ldi	r26, 0x31	; 49
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e1 e3       	ldi	r30, 0x31	; 49
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8b 7f       	andi	r24, 0xFB	; 251
    1bee:	8c 93       	st	X, r24
PIND &= ~(1<<2);
    1bf0:	a0 e3       	ldi	r26, 0x30	; 48
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e0 e3       	ldi	r30, 0x30	; 48
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	8b 7f       	andi	r24, 0xFB	; 251
    1bfc:	8c 93       	st	X, r24

DDRD &= ~(1<<3); // RIGHT IR sensors  as input
    1bfe:	a1 e3       	ldi	r26, 0x31	; 49
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e1 e3       	ldi	r30, 0x31	; 49
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	87 7f       	andi	r24, 0xF7	; 247
    1c0a:	8c 93       	st	X, r24
PIND &= ~(1<<3);
    1c0c:	a0 e3       	ldi	r26, 0x30	; 48
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e0 e3       	ldi	r30, 0x30	; 48
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	87 7f       	andi	r24, 0xF7	; 247
    1c18:	8c 93       	st	X, r24

DDRB &= ~(1<<4); // LEFT IR sensors  as input
    1c1a:	a7 e3       	ldi	r26, 0x37	; 55
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e7 e3       	ldi	r30, 0x37	; 55
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 7e       	andi	r24, 0xEF	; 239
    1c26:	8c 93       	st	X, r24
PINB &= ~(1<<4);
    1c28:	a6 e3       	ldi	r26, 0x36	; 54
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e6 e3       	ldi	r30, 0x36	; 54
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	8f 7e       	andi	r24, 0xEF	; 239
    1c34:	8c 93       	st	X, r24

DDRB |=(1<<1); // trigger pin
    1c36:	a7 e3       	ldi	r26, 0x37	; 55
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e7 e3       	ldi	r30, 0x37	; 55
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	82 60       	ori	r24, 0x02	; 2
    1c42:	8c 93       	st	X, r24
PORTB &= ~(1<<1);
    1c44:	a8 e3       	ldi	r26, 0x38	; 56
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e8 e3       	ldi	r30, 0x38	; 56
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8d 7f       	andi	r24, 0xFD	; 253
    1c50:	8c 93       	st	X, r24

LCD_Init();
    1c52:	0e 94 4c 0a 	call	0x1498	; 0x1498 <LCD_Init>
LCD_String_xy(1, 0, "Ultrasonic");
    1c56:	20 e6       	ldi	r18, 0x60	; 96
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	a9 01       	movw	r20, r18
    1c60:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_String_xy>

sei();			/* Enable global interrupt */
    1c64:	78 94       	sei
TIMSK = (1 << TOIE1);	/* Enable Timer1 overflow interrupts */
    1c66:	e9 e5       	ldi	r30, 0x59	; 89
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	84 e0       	ldi	r24, 0x04	; 4
    1c6c:	80 83       	st	Z, r24
TCCR1A = 0;		/* Set all bit to zero Normal operation */
    1c6e:	ef e4       	ldi	r30, 0x4F	; 79
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	10 82       	st	Z, r1

IR();
    1c74:	0e 94 79 07 	call	0xef2	; 0xef2 <IR>

	while (1){

		/* Give 10us trigger pulse on trig. pin to the sensor */
				PORTB |= (1 << Trigger_pin);
    1c78:	a8 e3       	ldi	r26, 0x38	; 56
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e8 e3       	ldi	r30, 0x38	; 56
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	81 60       	ori	r24, 0x01	; 1
    1c84:	8c 93       	st	X, r24
    1c86:	fe 01       	movw	r30, r28
    1c88:	ef 55       	subi	r30, 0x5F	; 95
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	a0 e2       	ldi	r26, 0x20	; 32
    1c92:	b1 e4       	ldi	r27, 0x41	; 65
    1c94:	80 83       	st	Z, r24
    1c96:	91 83       	std	Z+1, r25	; 0x01
    1c98:	a2 83       	std	Z+2, r26	; 0x02
    1c9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c9c:	8e 01       	movw	r16, r28
    1c9e:	03 56       	subi	r16, 0x63	; 99
    1ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	ef 55       	subi	r30, 0x5F	; 95
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	60 81       	ld	r22, Z
    1caa:	71 81       	ldd	r23, Z+1	; 0x01
    1cac:	82 81       	ldd	r24, Z+2	; 0x02
    1cae:	93 81       	ldd	r25, Z+3	; 0x03
    1cb0:	2b ea       	ldi	r18, 0xAB	; 171
    1cb2:	3a ea       	ldi	r19, 0xAA	; 170
    1cb4:	4a ea       	ldi	r20, 0xAA	; 170
    1cb6:	5e e3       	ldi	r21, 0x3E	; 62
    1cb8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	f8 01       	movw	r30, r16
    1cc2:	80 83       	st	Z, r24
    1cc4:	91 83       	std	Z+1, r25	; 0x01
    1cc6:	a2 83       	std	Z+2, r26	; 0x02
    1cc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cca:	fe 01       	movw	r30, r28
    1ccc:	e3 56       	subi	r30, 0x63	; 99
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	60 81       	ld	r22, Z
    1cd2:	71 81       	ldd	r23, Z+1	; 0x01
    1cd4:	82 81       	ldd	r24, Z+2	; 0x02
    1cd6:	93 81       	ldd	r25, Z+3	; 0x03
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e8       	ldi	r20, 0x80	; 128
    1cde:	5f e3       	ldi	r21, 0x3F	; 63
    1ce0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1ce4:	88 23       	and	r24, r24
    1ce6:	34 f4       	brge	.+12     	; 0x1cf4 <main+0x154>
		__ticks = 1;
    1ce8:	fe 01       	movw	r30, r28
    1cea:	e4 56       	subi	r30, 0x64	; 100
    1cec:	ff 4f       	sbci	r31, 0xFF	; 255
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	80 83       	st	Z, r24
    1cf2:	e0 c0       	rjmp	.+448    	; 0x1eb4 <main+0x314>
	else if (__tmp > 255)
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	e3 56       	subi	r30, 0x63	; 99
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	4f e7       	ldi	r20, 0x7F	; 127
    1d08:	53 e4       	ldi	r21, 0x43	; 67
    1d0a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1d0e:	18 16       	cp	r1, r24
    1d10:	0c f0       	brlt	.+2      	; 0x1d14 <main+0x174>
    1d12:	c0 c0       	rjmp	.+384    	; 0x1e94 <main+0x2f4>
	{
		_delay_ms(__us / 1000.0);
    1d14:	fe 01       	movw	r30, r28
    1d16:	ef 55       	subi	r30, 0x5F	; 95
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	60 81       	ld	r22, Z
    1d1c:	71 81       	ldd	r23, Z+1	; 0x01
    1d1e:	82 81       	ldd	r24, Z+2	; 0x02
    1d20:	93 81       	ldd	r25, Z+3	; 0x03
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	4a e7       	ldi	r20, 0x7A	; 122
    1d28:	54 e4       	ldi	r21, 0x44	; 68
    1d2a:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	fe 01       	movw	r30, r28
    1d34:	e8 56       	subi	r30, 0x68	; 104
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	80 83       	st	Z, r24
    1d3a:	91 83       	std	Z+1, r25	; 0x01
    1d3c:	a2 83       	std	Z+2, r26	; 0x02
    1d3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d40:	8e 01       	movw	r16, r28
    1d42:	0c 56       	subi	r16, 0x6C	; 108
    1d44:	1f 4f       	sbci	r17, 0xFF	; 255
    1d46:	fe 01       	movw	r30, r28
    1d48:	e8 56       	subi	r30, 0x68	; 104
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	60 81       	ld	r22, Z
    1d4e:	71 81       	ldd	r23, Z+1	; 0x01
    1d50:	82 81       	ldd	r24, Z+2	; 0x02
    1d52:	93 81       	ldd	r25, Z+3	; 0x03
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4a e7       	ldi	r20, 0x7A	; 122
    1d5a:	53 e4       	ldi	r21, 0x43	; 67
    1d5c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	f8 01       	movw	r30, r16
    1d66:	80 83       	st	Z, r24
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	a2 83       	std	Z+2, r26	; 0x02
    1d6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d6e:	fe 01       	movw	r30, r28
    1d70:	ec 56       	subi	r30, 0x6C	; 108
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	60 81       	ld	r22, Z
    1d76:	71 81       	ldd	r23, Z+1	; 0x01
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e8       	ldi	r20, 0x80	; 128
    1d82:	5f e3       	ldi	r21, 0x3F	; 63
    1d84:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1d88:	88 23       	and	r24, r24
    1d8a:	44 f4       	brge	.+16     	; 0x1d9c <main+0x1fc>
		__ticks = 1;
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	ee 56       	subi	r30, 0x6E	; 110
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	91 83       	std	Z+1, r25	; 0x01
    1d98:	80 83       	st	Z, r24
    1d9a:	64 c0       	rjmp	.+200    	; 0x1e64 <main+0x2c4>
	else if (__tmp > 65535)
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	ec 56       	subi	r30, 0x6C	; 108
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	60 81       	ld	r22, Z
    1da4:	71 81       	ldd	r23, Z+1	; 0x01
    1da6:	82 81       	ldd	r24, Z+2	; 0x02
    1da8:	93 81       	ldd	r25, Z+3	; 0x03
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	3f ef       	ldi	r19, 0xFF	; 255
    1dae:	4f e7       	ldi	r20, 0x7F	; 127
    1db0:	57 e4       	ldi	r21, 0x47	; 71
    1db2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1db6:	18 16       	cp	r1, r24
    1db8:	0c f0       	brlt	.+2      	; 0x1dbc <main+0x21c>
    1dba:	43 c0       	rjmp	.+134    	; 0x1e42 <main+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e8 56       	subi	r30, 0x68	; 104
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	60 81       	ld	r22, Z
    1dc4:	71 81       	ldd	r23, Z+1	; 0x01
    1dc6:	82 81       	ldd	r24, Z+2	; 0x02
    1dc8:	93 81       	ldd	r25, Z+3	; 0x03
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e2       	ldi	r20, 0x20	; 32
    1dd0:	51 e4       	ldi	r21, 0x41	; 65
    1dd2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	8e 01       	movw	r16, r28
    1ddc:	0e 56       	subi	r16, 0x6E	; 110
    1dde:	1f 4f       	sbci	r17, 0xFF	; 255
    1de0:	bc 01       	movw	r22, r24
    1de2:	cd 01       	movw	r24, r26
    1de4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	f8 01       	movw	r30, r16
    1dee:	91 83       	std	Z+1, r25	; 0x01
    1df0:	80 83       	st	Z, r24
    1df2:	1f c0       	rjmp	.+62     	; 0x1e32 <main+0x292>
    1df4:	fe 01       	movw	r30, r28
    1df6:	e0 57       	subi	r30, 0x70	; 112
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	89 e1       	ldi	r24, 0x19	; 25
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	80 83       	st	Z, r24
    1e02:	fe 01       	movw	r30, r28
    1e04:	e0 57       	subi	r30, 0x70	; 112
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	80 81       	ld	r24, Z
    1e0a:	91 81       	ldd	r25, Z+1	; 0x01
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <main+0x26c>
    1e10:	fe 01       	movw	r30, r28
    1e12:	e0 57       	subi	r30, 0x70	; 112
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1a:	de 01       	movw	r26, r28
    1e1c:	ae 56       	subi	r26, 0x6E	; 110
    1e1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e20:	fe 01       	movw	r30, r28
    1e22:	ee 56       	subi	r30, 0x6E	; 110
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	80 81       	ld	r24, Z
    1e28:	91 81       	ldd	r25, Z+1	; 0x01
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	11 96       	adiw	r26, 0x01	; 1
    1e2e:	9c 93       	st	X, r25
    1e30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e32:	fe 01       	movw	r30, r28
    1e34:	ee 56       	subi	r30, 0x6E	; 110
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	80 81       	ld	r24, Z
    1e3a:	91 81       	ldd	r25, Z+1	; 0x01
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	d1 f6       	brne	.-76     	; 0x1df4 <main+0x254>
    1e40:	4b c0       	rjmp	.+150    	; 0x1ed8 <main+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e42:	8e 01       	movw	r16, r28
    1e44:	0e 56       	subi	r16, 0x6E	; 110
    1e46:	1f 4f       	sbci	r17, 0xFF	; 255
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ec 56       	subi	r30, 0x6C	; 108
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	60 81       	ld	r22, Z
    1e50:	71 81       	ldd	r23, Z+1	; 0x01
    1e52:	82 81       	ldd	r24, Z+2	; 0x02
    1e54:	93 81       	ldd	r25, Z+3	; 0x03
    1e56:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	f8 01       	movw	r30, r16
    1e60:	91 83       	std	Z+1, r25	; 0x01
    1e62:	80 83       	st	Z, r24
    1e64:	de 01       	movw	r26, r28
    1e66:	a2 57       	subi	r26, 0x72	; 114
    1e68:	bf 4f       	sbci	r27, 0xFF	; 255
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	ee 56       	subi	r30, 0x6E	; 110
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	80 81       	ld	r24, Z
    1e72:	91 81       	ldd	r25, Z+1	; 0x01
    1e74:	11 96       	adiw	r26, 0x01	; 1
    1e76:	9c 93       	st	X, r25
    1e78:	8e 93       	st	-X, r24
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e2 57       	subi	r30, 0x72	; 114
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 81       	ld	r24, Z
    1e82:	91 81       	ldd	r25, Z+1	; 0x01
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <main+0x2e4>
    1e88:	fe 01       	movw	r30, r28
    1e8a:	e2 57       	subi	r30, 0x72	; 114
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	91 83       	std	Z+1, r25	; 0x01
    1e90:	80 83       	st	Z, r24
    1e92:	22 c0       	rjmp	.+68     	; 0x1ed8 <main+0x338>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e94:	8e 01       	movw	r16, r28
    1e96:	04 56       	subi	r16, 0x64	; 100
    1e98:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	e3 56       	subi	r30, 0x63	; 99
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	60 81       	ld	r22, Z
    1ea2:	71 81       	ldd	r23, Z+1	; 0x01
    1ea4:	82 81       	ldd	r24, Z+2	; 0x02
    1ea6:	93 81       	ldd	r25, Z+3	; 0x03
    1ea8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	80 83       	st	Z, r24
    1eb4:	de 01       	movw	r26, r28
    1eb6:	a3 57       	subi	r26, 0x73	; 115
    1eb8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e4 56       	subi	r30, 0x64	; 100
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 81       	ld	r24, Z
    1ec2:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	e3 57       	subi	r30, 0x73	; 115
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	80 81       	ld	r24, Z
    1ecc:	8a 95       	dec	r24
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <main+0x32c>
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e3 57       	subi	r30, 0x73	; 115
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 83       	st	Z, r24
				_delay_us(10);
				PORTB &= (~(1 << Trigger_pin));
    1ed8:	a8 e3       	ldi	r26, 0x38	; 56
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e8 e3       	ldi	r30, 0x38	; 56
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	8e 7f       	andi	r24, 0xFE	; 254
    1ee4:	8c 93       	st	X, r24

				TCNT1 = 0;	// Clear Timer counter
    1ee6:	ec e4       	ldi	r30, 0x4C	; 76
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	11 82       	std	Z+1, r1	; 0x01
    1eec:	10 82       	st	Z, r1
				TCCR1B = 0x41;	// Capture on rising edge, No prescaler
    1eee:	ee e4       	ldi	r30, 0x4E	; 78
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	81 e4       	ldi	r24, 0x41	; 65
    1ef4:	80 83       	st	Z, r24
				TIFR = 1<<ICF1;	// Clear ICP flag (Input Capture flag)
    1ef6:	e8 e5       	ldi	r30, 0x58	; 88
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 e2       	ldi	r24, 0x20	; 32
    1efc:	80 83       	st	Z, r24
				TIFR = 1<<TOV1;	// Clear Timer Overflow flag
    1efe:	e8 e5       	ldi	r30, 0x58	; 88
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	84 e0       	ldi	r24, 0x04	; 4
    1f04:	80 83       	st	Z, r24

				/*Calculate width of Echo by Input Capture (ICP) */

				while ((TIFR & (1 << ICF1)) == 0);/* Wait for rising edge */
    1f06:	e8 e5       	ldi	r30, 0x58	; 88
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	88 2f       	mov	r24, r24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	80 72       	andi	r24, 0x20	; 32
    1f12:	90 70       	andi	r25, 0x00	; 0
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	b9 f3       	breq	.-18     	; 0x1f06 <main+0x366>
				TCNT1 = 0;	/* Clear Timer counter */
    1f18:	ec e4       	ldi	r30, 0x4C	; 76
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	11 82       	std	Z+1, r1	; 0x01
    1f1e:	10 82       	st	Z, r1
				TCCR1B = 0x01;	// Capture on falling edge
    1f20:	ee e4       	ldi	r30, 0x4E	; 78
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	80 83       	st	Z, r24
				TIFR = 1<<ICF1;	// Clear Input Capture flag
    1f28:	e8 e5       	ldi	r30, 0x58	; 88
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 e2       	ldi	r24, 0x20	; 32
    1f2e:	80 83       	st	Z, r24
				TIFR = 1<<TOV1;	// Clear Timer Overflow flag
    1f30:	e8 e5       	ldi	r30, 0x58	; 88
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	84 e0       	ldi	r24, 0x04	; 4
    1f36:	80 83       	st	Z, r24
				TimerOverflow = 0; // Clear Timer overflow count
    1f38:	10 92 83 01 	sts	0x0183, r1
    1f3c:	10 92 82 01 	sts	0x0182, r1

				while ((TIFR & (1 << ICF1)) == 0);// Wait for falling edge
    1f40:	e8 e5       	ldi	r30, 0x58	; 88
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	80 72       	andi	r24, 0x20	; 32
    1f4c:	90 70       	andi	r25, 0x00	; 0
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	b9 f3       	breq	.-18     	; 0x1f40 <main+0x3a0>
				count = ICR1 + (65535 * TimerOverflow);	// Take count
    1f52:	e6 e4       	ldi	r30, 0x46	; 70
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	91 81       	ldd	r25, Z+1	; 0x01
    1f5a:	7c 01       	movw	r14, r24
    1f5c:	00 e0       	ldi	r16, 0x00	; 0
    1f5e:	10 e0       	ldi	r17, 0x00	; 0
    1f60:	80 91 82 01 	lds	r24, 0x0182
    1f64:	90 91 83 01 	lds	r25, 0x0183
    1f68:	aa 27       	eor	r26, r26
    1f6a:	97 fd       	sbrc	r25, 7
    1f6c:	a0 95       	com	r26
    1f6e:	ba 2f       	mov	r27, r26
    1f70:	2f ef       	ldi	r18, 0xFF	; 255
    1f72:	3f ef       	ldi	r19, 0xFF	; 255
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	bc 01       	movw	r22, r24
    1f7a:	cd 01       	movw	r24, r26
    1f7c:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <__mulsi3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	fe 01       	movw	r30, r28
    1f86:	e7 55       	subi	r30, 0x57	; 87
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	8e 0d       	add	r24, r14
    1f8c:	9f 1d       	adc	r25, r15
    1f8e:	a0 1f       	adc	r26, r16
    1f90:	b1 1f       	adc	r27, r17
    1f92:	80 83       	st	Z, r24
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	a2 83       	std	Z+2, r26	; 0x02
    1f98:	b3 83       	std	Z+3, r27	; 0x03
				/* 8MHz Timer freq, sound speed =343 m/s */
				distance = (double)count / 466.47;
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	e7 55       	subi	r30, 0x57	; 87
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	60 81       	ld	r22, Z
    1fa2:	71 81       	ldd	r23, Z+1	; 0x01
    1fa4:	82 81       	ldd	r24, Z+2	; 0x02
    1fa6:	93 81       	ldd	r25, Z+3	; 0x03
    1fa8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	8e 01       	movw	r16, r28
    1fb2:	0b 55       	subi	r16, 0x5B	; 91
    1fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	29 e2       	ldi	r18, 0x29	; 41
    1fbc:	3c e3       	ldi	r19, 0x3C	; 60
    1fbe:	49 ee       	ldi	r20, 0xE9	; 233
    1fc0:	53 e4       	ldi	r21, 0x43	; 67
    1fc2:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	f8 01       	movw	r30, r16
    1fcc:	80 83       	st	Z, r24
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	a2 83       	std	Z+2, r26	; 0x02
    1fd2:	b3 83       	std	Z+3, r27	; 0x03

				dtostrf(distance, 2, 2, string);// distance to string
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	eb 55       	subi	r30, 0x5B	; 91
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	80 81       	ld	r24, Z
    1fdc:	91 81       	ldd	r25, Z+1	; 0x01
    1fde:	a2 81       	ldd	r26, Z+2	; 0x02
    1fe0:	b3 81       	ldd	r27, Z+3	; 0x03
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e3 55       	subi	r30, 0x53	; 83
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	42 e0       	ldi	r20, 0x02	; 2
    1fee:	22 e0       	ldi	r18, 0x02	; 2
    1ff0:	8f 01       	movw	r16, r30
    1ff2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <dtostrf>
				strcat(string, " cm   ");
    1ff6:	8e 01       	movw	r16, r28
    1ff8:	03 55       	subi	r16, 0x53	; 83
    1ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	83 55       	subi	r24, 0x53	; 83
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	0e 94 07 18 	call	0x300e	; 0x300e <strlen>
    2006:	80 0f       	add	r24, r16
    2008:	91 1f       	adc	r25, r17
    200a:	2b e6       	ldi	r18, 0x6B	; 107
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	b9 01       	movw	r22, r18
    2010:	47 e0       	ldi	r20, 0x07	; 7
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <memcpy>
				LCD_String_xy(2, 0, "Dist = ");
    2018:	22 e7       	ldi	r18, 0x72	; 114
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	60 e0       	ldi	r22, 0x00	; 0
    2020:	a9 01       	movw	r20, r18
    2022:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_String_xy>
				LCD_String_xy(2, 7, string);	// Print distance
    2026:	9e 01       	movw	r18, r28
    2028:	23 55       	subi	r18, 0x53	; 83
    202a:	3f 4f       	sbci	r19, 0xFF	; 255
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	67 e0       	ldi	r22, 0x07	; 7
    2030:	a9 01       	movw	r20, r18
    2032:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_String_xy>
    2036:	fe 01       	movw	r30, r28
    2038:	e7 57       	subi	r30, 0x77	; 119
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a8 e4       	ldi	r26, 0x48	; 72
    2042:	b3 e4       	ldi	r27, 0x43	; 67
    2044:	80 83       	st	Z, r24
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	a2 83       	std	Z+2, r26	; 0x02
    204a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204c:	8e 01       	movw	r16, r28
    204e:	0b 57       	subi	r16, 0x7B	; 123
    2050:	1f 4f       	sbci	r17, 0xFF	; 255
    2052:	fe 01       	movw	r30, r28
    2054:	e7 57       	subi	r30, 0x77	; 119
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	60 81       	ld	r22, Z
    205a:	71 81       	ldd	r23, Z+1	; 0x01
    205c:	82 81       	ldd	r24, Z+2	; 0x02
    205e:	93 81       	ldd	r25, Z+3	; 0x03
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	4a e7       	ldi	r20, 0x7A	; 122
    2066:	53 e4       	ldi	r21, 0x43	; 67
    2068:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	f8 01       	movw	r30, r16
    2072:	80 83       	st	Z, r24
    2074:	91 83       	std	Z+1, r25	; 0x01
    2076:	a2 83       	std	Z+2, r26	; 0x02
    2078:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    207a:	fe 01       	movw	r30, r28
    207c:	eb 57       	subi	r30, 0x7B	; 123
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	60 81       	ld	r22, Z
    2082:	71 81       	ldd	r23, Z+1	; 0x01
    2084:	82 81       	ldd	r24, Z+2	; 0x02
    2086:	93 81       	ldd	r25, Z+3	; 0x03
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	40 e8       	ldi	r20, 0x80	; 128
    208e:	5f e3       	ldi	r21, 0x3F	; 63
    2090:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2094:	88 23       	and	r24, r24
    2096:	44 f4       	brge	.+16     	; 0x20a8 <main+0x508>
		__ticks = 1;
    2098:	fe 01       	movw	r30, r28
    209a:	ed 57       	subi	r30, 0x7D	; 125
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	80 83       	st	Z, r24
    20a6:	64 c0       	rjmp	.+200    	; 0x2170 <main+0x5d0>
	else if (__tmp > 65535)
    20a8:	fe 01       	movw	r30, r28
    20aa:	eb 57       	subi	r30, 0x7B	; 123
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	3f ef       	ldi	r19, 0xFF	; 255
    20ba:	4f e7       	ldi	r20, 0x7F	; 127
    20bc:	57 e4       	ldi	r21, 0x47	; 71
    20be:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    20c2:	18 16       	cp	r1, r24
    20c4:	0c f0       	brlt	.+2      	; 0x20c8 <main+0x528>
    20c6:	43 c0       	rjmp	.+134    	; 0x214e <main+0x5ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c8:	fe 01       	movw	r30, r28
    20ca:	e7 57       	subi	r30, 0x77	; 119
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	60 81       	ld	r22, Z
    20d0:	71 81       	ldd	r23, Z+1	; 0x01
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e2       	ldi	r20, 0x20	; 32
    20dc:	51 e4       	ldi	r21, 0x41	; 65
    20de:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8e 01       	movw	r16, r28
    20e8:	0d 57       	subi	r16, 0x7D	; 125
    20ea:	1f 4f       	sbci	r17, 0xFF	; 255
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	f8 01       	movw	r30, r16
    20fa:	91 83       	std	Z+1, r25	; 0x01
    20fc:	80 83       	st	Z, r24
    20fe:	1f c0       	rjmp	.+62     	; 0x213e <main+0x59e>
    2100:	fe 01       	movw	r30, r28
    2102:	ef 57       	subi	r30, 0x7F	; 127
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	89 e1       	ldi	r24, 0x19	; 25
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	91 83       	std	Z+1, r25	; 0x01
    210c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    210e:	fe 01       	movw	r30, r28
    2110:	ef 57       	subi	r30, 0x7F	; 127
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <main+0x578>
    211c:	fe 01       	movw	r30, r28
    211e:	ef 57       	subi	r30, 0x7F	; 127
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	91 83       	std	Z+1, r25	; 0x01
    2124:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2126:	de 01       	movw	r26, r28
    2128:	ad 57       	subi	r26, 0x7D	; 125
    212a:	bf 4f       	sbci	r27, 0xFF	; 255
    212c:	fe 01       	movw	r30, r28
    212e:	ed 57       	subi	r30, 0x7D	; 125
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	80 81       	ld	r24, Z
    2134:	91 81       	ldd	r25, Z+1	; 0x01
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	11 96       	adiw	r26, 0x01	; 1
    213a:	9c 93       	st	X, r25
    213c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213e:	fe 01       	movw	r30, r28
    2140:	ed 57       	subi	r30, 0x7D	; 125
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	d1 f6       	brne	.-76     	; 0x2100 <main+0x560>
    214c:	27 c0       	rjmp	.+78     	; 0x219c <main+0x5fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214e:	8e 01       	movw	r16, r28
    2150:	0d 57       	subi	r16, 0x7D	; 125
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
    2154:	fe 01       	movw	r30, r28
    2156:	eb 57       	subi	r30, 0x7B	; 123
    2158:	ff 4f       	sbci	r31, 0xFF	; 255
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	82 81       	ldd	r24, Z+2	; 0x02
    2160:	93 81       	ldd	r25, Z+3	; 0x03
    2162:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	f8 01       	movw	r30, r16
    216c:	91 83       	std	Z+1, r25	; 0x01
    216e:	80 83       	st	Z, r24
    2170:	de 01       	movw	r26, r28
    2172:	a1 58       	subi	r26, 0x81	; 129
    2174:	bf 4f       	sbci	r27, 0xFF	; 255
    2176:	fe 01       	movw	r30, r28
    2178:	ed 57       	subi	r30, 0x7D	; 125
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	80 81       	ld	r24, Z
    217e:	91 81       	ldd	r25, Z+1	; 0x01
    2180:	8d 93       	st	X+, r24
    2182:	9c 93       	st	X, r25
    2184:	fe 01       	movw	r30, r28
    2186:	e1 58       	subi	r30, 0x81	; 129
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	80 81       	ld	r24, Z
    218c:	91 81       	ldd	r25, Z+1	; 0x01
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <main+0x5ee>
    2192:	fe 01       	movw	r30, r28
    2194:	e1 58       	subi	r30, 0x81	; 129
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	91 83       	std	Z+1, r25	; 0x01
    219a:	80 83       	st	Z, r24
				_delay_ms(200);

if (distance > 20 ){
    219c:	fe 01       	movw	r30, r28
    219e:	eb 55       	subi	r30, 0x5B	; 91
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	60 81       	ld	r22, Z
    21a4:	71 81       	ldd	r23, Z+1	; 0x01
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	93 81       	ldd	r25, Z+3	; 0x03
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	40 ea       	ldi	r20, 0xA0	; 160
    21b0:	51 e4       	ldi	r21, 0x41	; 65
    21b2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    21b6:	18 16       	cp	r1, r24
    21b8:	3c f4       	brge	.+14     	; 0x21c8 <main+0x628>

	pwm1(250); // if there is nothing infront of the car then move forward
    21ba:	8a ef       	ldi	r24, 0xFA	; 250
    21bc:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <pwm1>
	pwm2(250);
    21c0:	8a ef       	ldi	r24, 0xFA	; 250
    21c2:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <pwm2>
    21c6:	58 cd       	rjmp	.-1360   	; 0x1c78 <main+0xd8>

}

else if (distance < 20){
    21c8:	fe 01       	movw	r30, r28
    21ca:	eb 55       	subi	r30, 0x5B	; 91
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	60 81       	ld	r22, Z
    21d0:	71 81       	ldd	r23, Z+1	; 0x01
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 ea       	ldi	r20, 0xA0	; 160
    21dc:	51 e4       	ldi	r21, 0x41	; 65
    21de:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	0c f0       	brlt	.+2      	; 0x21e8 <main+0x648>
    21e6:	48 cd       	rjmp	.-1392   	; 0x1c78 <main+0xd8>
	/*
	 * brakes
	 */
	pwm1(0);//right wheel
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <pwm1>
	pwm2(0);//left wheel
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <pwm2>
    21f4:	fe 01       	movw	r30, r28
    21f6:	e5 58       	subi	r30, 0x85	; 133
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	aa e7       	ldi	r26, 0x7A	; 122
    2200:	b3 e4       	ldi	r27, 0x43	; 67
    2202:	80 83       	st	Z, r24
    2204:	91 83       	std	Z+1, r25	; 0x01
    2206:	a2 83       	std	Z+2, r26	; 0x02
    2208:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220a:	8e 01       	movw	r16, r28
    220c:	09 58       	subi	r16, 0x89	; 137
    220e:	1f 4f       	sbci	r17, 0xFF	; 255
    2210:	fe 01       	movw	r30, r28
    2212:	e5 58       	subi	r30, 0x85	; 133
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	60 81       	ld	r22, Z
    2218:	71 81       	ldd	r23, Z+1	; 0x01
    221a:	82 81       	ldd	r24, Z+2	; 0x02
    221c:	93 81       	ldd	r25, Z+3	; 0x03
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	4a e7       	ldi	r20, 0x7A	; 122
    2224:	53 e4       	ldi	r21, 0x43	; 67
    2226:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	f8 01       	movw	r30, r16
    2230:	80 83       	st	Z, r24
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	a2 83       	std	Z+2, r26	; 0x02
    2236:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2238:	fe 01       	movw	r30, r28
    223a:	e9 58       	subi	r30, 0x89	; 137
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	60 81       	ld	r22, Z
    2240:	71 81       	ldd	r23, Z+1	; 0x01
    2242:	82 81       	ldd	r24, Z+2	; 0x02
    2244:	93 81       	ldd	r25, Z+3	; 0x03
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e8       	ldi	r20, 0x80	; 128
    224c:	5f e3       	ldi	r21, 0x3F	; 63
    224e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2252:	88 23       	and	r24, r24
    2254:	44 f4       	brge	.+16     	; 0x2266 <main+0x6c6>
		__ticks = 1;
    2256:	fe 01       	movw	r30, r28
    2258:	eb 58       	subi	r30, 0x8B	; 139
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	91 83       	std	Z+1, r25	; 0x01
    2262:	80 83       	st	Z, r24
    2264:	64 c0       	rjmp	.+200    	; 0x232e <main+0x78e>
	else if (__tmp > 65535)
    2266:	fe 01       	movw	r30, r28
    2268:	e9 58       	subi	r30, 0x89	; 137
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	60 81       	ld	r22, Z
    226e:	71 81       	ldd	r23, Z+1	; 0x01
    2270:	82 81       	ldd	r24, Z+2	; 0x02
    2272:	93 81       	ldd	r25, Z+3	; 0x03
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	3f ef       	ldi	r19, 0xFF	; 255
    2278:	4f e7       	ldi	r20, 0x7F	; 127
    227a:	57 e4       	ldi	r21, 0x47	; 71
    227c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2280:	18 16       	cp	r1, r24
    2282:	0c f0       	brlt	.+2      	; 0x2286 <main+0x6e6>
    2284:	43 c0       	rjmp	.+134    	; 0x230c <main+0x76c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	fe 01       	movw	r30, r28
    2288:	e5 58       	subi	r30, 0x85	; 133
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	60 81       	ld	r22, Z
    228e:	71 81       	ldd	r23, Z+1	; 0x01
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	40 e2       	ldi	r20, 0x20	; 32
    229a:	51 e4       	ldi	r21, 0x41	; 65
    229c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22a0:	dc 01       	movw	r26, r24
    22a2:	cb 01       	movw	r24, r22
    22a4:	8e 01       	movw	r16, r28
    22a6:	0b 58       	subi	r16, 0x8B	; 139
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	bc 01       	movw	r22, r24
    22ac:	cd 01       	movw	r24, r26
    22ae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	f8 01       	movw	r30, r16
    22b8:	91 83       	std	Z+1, r25	; 0x01
    22ba:	80 83       	st	Z, r24
    22bc:	1f c0       	rjmp	.+62     	; 0x22fc <main+0x75c>
    22be:	fe 01       	movw	r30, r28
    22c0:	ed 58       	subi	r30, 0x8D	; 141
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	89 e1       	ldi	r24, 0x19	; 25
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	91 83       	std	Z+1, r25	; 0x01
    22ca:	80 83       	st	Z, r24
    22cc:	fe 01       	movw	r30, r28
    22ce:	ed 58       	subi	r30, 0x8D	; 141
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	80 81       	ld	r24, Z
    22d4:	91 81       	ldd	r25, Z+1	; 0x01
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <main+0x736>
    22da:	fe 01       	movw	r30, r28
    22dc:	ed 58       	subi	r30, 0x8D	; 141
    22de:	ff 4f       	sbci	r31, 0xFF	; 255
    22e0:	91 83       	std	Z+1, r25	; 0x01
    22e2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e4:	de 01       	movw	r26, r28
    22e6:	ab 58       	subi	r26, 0x8B	; 139
    22e8:	bf 4f       	sbci	r27, 0xFF	; 255
    22ea:	fe 01       	movw	r30, r28
    22ec:	eb 58       	subi	r30, 0x8B	; 139
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	80 81       	ld	r24, Z
    22f2:	91 81       	ldd	r25, Z+1	; 0x01
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	11 96       	adiw	r26, 0x01	; 1
    22f8:	9c 93       	st	X, r25
    22fa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fc:	fe 01       	movw	r30, r28
    22fe:	eb 58       	subi	r30, 0x8B	; 139
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	80 81       	ld	r24, Z
    2304:	91 81       	ldd	r25, Z+1	; 0x01
    2306:	00 97       	sbiw	r24, 0x00	; 0
    2308:	d1 f6       	brne	.-76     	; 0x22be <main+0x71e>
    230a:	27 c0       	rjmp	.+78     	; 0x235a <main+0x7ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230c:	8e 01       	movw	r16, r28
    230e:	0b 58       	subi	r16, 0x8B	; 139
    2310:	1f 4f       	sbci	r17, 0xFF	; 255
    2312:	fe 01       	movw	r30, r28
    2314:	e9 58       	subi	r30, 0x89	; 137
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	60 81       	ld	r22, Z
    231a:	71 81       	ldd	r23, Z+1	; 0x01
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	f8 01       	movw	r30, r16
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	80 83       	st	Z, r24
    232e:	de 01       	movw	r26, r28
    2330:	af 58       	subi	r26, 0x8F	; 143
    2332:	bf 4f       	sbci	r27, 0xFF	; 255
    2334:	fe 01       	movw	r30, r28
    2336:	eb 58       	subi	r30, 0x8B	; 139
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	80 81       	ld	r24, Z
    233c:	91 81       	ldd	r25, Z+1	; 0x01
    233e:	8d 93       	st	X+, r24
    2340:	9c 93       	st	X, r25
    2342:	fe 01       	movw	r30, r28
    2344:	ef 58       	subi	r30, 0x8F	; 143
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 81       	ld	r24, Z
    234a:	91 81       	ldd	r25, Z+1	; 0x01
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <main+0x7ac>
    2350:	fe 01       	movw	r30, r28
    2352:	ef 58       	subi	r30, 0x8F	; 143
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
	_delay_ms(250);
	/*
	 * move left just to let the car adjust it self then stop to take the reading
	 */
	pwm1(250);
    235a:	8a ef       	ldi	r24, 0xFA	; 250
    235c:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <pwm1>
	pwm2 (100);
    2360:	84 e6       	ldi	r24, 0x64	; 100
    2362:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <pwm2>
    2366:	fe 01       	movw	r30, r28
    2368:	e3 59       	subi	r30, 0x93	; 147
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	a6 e1       	ldi	r26, 0x16	; 22
    2372:	b3 e4       	ldi	r27, 0x43	; 67
    2374:	80 83       	st	Z, r24
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	a2 83       	std	Z+2, r26	; 0x02
    237a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237c:	8e 01       	movw	r16, r28
    237e:	07 59       	subi	r16, 0x97	; 151
    2380:	1f 4f       	sbci	r17, 0xFF	; 255
    2382:	fe 01       	movw	r30, r28
    2384:	e3 59       	subi	r30, 0x93	; 147
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	60 81       	ld	r22, Z
    238a:	71 81       	ldd	r23, Z+1	; 0x01
    238c:	82 81       	ldd	r24, Z+2	; 0x02
    238e:	93 81       	ldd	r25, Z+3	; 0x03
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	4a e7       	ldi	r20, 0x7A	; 122
    2396:	53 e4       	ldi	r21, 0x43	; 67
    2398:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	f8 01       	movw	r30, r16
    23a2:	80 83       	st	Z, r24
    23a4:	91 83       	std	Z+1, r25	; 0x01
    23a6:	a2 83       	std	Z+2, r26	; 0x02
    23a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23aa:	fe 01       	movw	r30, r28
    23ac:	e7 59       	subi	r30, 0x97	; 151
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	60 81       	ld	r22, Z
    23b2:	71 81       	ldd	r23, Z+1	; 0x01
    23b4:	82 81       	ldd	r24, Z+2	; 0x02
    23b6:	93 81       	ldd	r25, Z+3	; 0x03
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e8       	ldi	r20, 0x80	; 128
    23be:	5f e3       	ldi	r21, 0x3F	; 63
    23c0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    23c4:	88 23       	and	r24, r24
    23c6:	44 f4       	brge	.+16     	; 0x23d8 <main+0x838>
		__ticks = 1;
    23c8:	fe 01       	movw	r30, r28
    23ca:	e9 59       	subi	r30, 0x99	; 153
    23cc:	ff 4f       	sbci	r31, 0xFF	; 255
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
    23d6:	64 c0       	rjmp	.+200    	; 0x24a0 <main+0x900>
	else if (__tmp > 65535)
    23d8:	fe 01       	movw	r30, r28
    23da:	e7 59       	subi	r30, 0x97	; 151
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	60 81       	ld	r22, Z
    23e0:	71 81       	ldd	r23, Z+1	; 0x01
    23e2:	82 81       	ldd	r24, Z+2	; 0x02
    23e4:	93 81       	ldd	r25, Z+3	; 0x03
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	0c f0       	brlt	.+2      	; 0x23f8 <main+0x858>
    23f6:	43 c0       	rjmp	.+134    	; 0x247e <main+0x8de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f8:	fe 01       	movw	r30, r28
    23fa:	e3 59       	subi	r30, 0x93	; 147
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	60 81       	ld	r22, Z
    2400:	71 81       	ldd	r23, Z+1	; 0x01
    2402:	82 81       	ldd	r24, Z+2	; 0x02
    2404:	93 81       	ldd	r25, Z+3	; 0x03
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e2       	ldi	r20, 0x20	; 32
    240c:	51 e4       	ldi	r21, 0x41	; 65
    240e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	8e 01       	movw	r16, r28
    2418:	09 59       	subi	r16, 0x99	; 153
    241a:	1f 4f       	sbci	r17, 0xFF	; 255
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	f8 01       	movw	r30, r16
    242a:	91 83       	std	Z+1, r25	; 0x01
    242c:	80 83       	st	Z, r24
    242e:	1f c0       	rjmp	.+62     	; 0x246e <main+0x8ce>
    2430:	fe 01       	movw	r30, r28
    2432:	eb 59       	subi	r30, 0x9B	; 155
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	89 e1       	ldi	r24, 0x19	; 25
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	91 83       	std	Z+1, r25	; 0x01
    243c:	80 83       	st	Z, r24
    243e:	fe 01       	movw	r30, r28
    2440:	eb 59       	subi	r30, 0x9B	; 155
    2442:	ff 4f       	sbci	r31, 0xFF	; 255
    2444:	80 81       	ld	r24, Z
    2446:	91 81       	ldd	r25, Z+1	; 0x01
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <main+0x8a8>
    244c:	fe 01       	movw	r30, r28
    244e:	eb 59       	subi	r30, 0x9B	; 155
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	91 83       	std	Z+1, r25	; 0x01
    2454:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2456:	de 01       	movw	r26, r28
    2458:	a9 59       	subi	r26, 0x99	; 153
    245a:	bf 4f       	sbci	r27, 0xFF	; 255
    245c:	fe 01       	movw	r30, r28
    245e:	e9 59       	subi	r30, 0x99	; 153
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	11 96       	adiw	r26, 0x01	; 1
    246a:	9c 93       	st	X, r25
    246c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246e:	fe 01       	movw	r30, r28
    2470:	e9 59       	subi	r30, 0x99	; 153
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	80 81       	ld	r24, Z
    2476:	91 81       	ldd	r25, Z+1	; 0x01
    2478:	00 97       	sbiw	r24, 0x00	; 0
    247a:	d1 f6       	brne	.-76     	; 0x2430 <main+0x890>
    247c:	27 c0       	rjmp	.+78     	; 0x24cc <main+0x92c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247e:	8e 01       	movw	r16, r28
    2480:	09 59       	subi	r16, 0x99	; 153
    2482:	1f 4f       	sbci	r17, 0xFF	; 255
    2484:	fe 01       	movw	r30, r28
    2486:	e7 59       	subi	r30, 0x97	; 151
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	60 81       	ld	r22, Z
    248c:	71 81       	ldd	r23, Z+1	; 0x01
    248e:	82 81       	ldd	r24, Z+2	; 0x02
    2490:	93 81       	ldd	r25, Z+3	; 0x03
    2492:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	f8 01       	movw	r30, r16
    249c:	91 83       	std	Z+1, r25	; 0x01
    249e:	80 83       	st	Z, r24
    24a0:	de 01       	movw	r26, r28
    24a2:	ad 59       	subi	r26, 0x9D	; 157
    24a4:	bf 4f       	sbci	r27, 0xFF	; 255
    24a6:	fe 01       	movw	r30, r28
    24a8:	e9 59       	subi	r30, 0x99	; 153
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	80 81       	ld	r24, Z
    24ae:	91 81       	ldd	r25, Z+1	; 0x01
    24b0:	8d 93       	st	X+, r24
    24b2:	9c 93       	st	X, r25
    24b4:	fe 01       	movw	r30, r28
    24b6:	ed 59       	subi	r30, 0x9D	; 157
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	80 81       	ld	r24, Z
    24bc:	91 81       	ldd	r25, Z+1	; 0x01
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	f1 f7       	brne	.-4      	; 0x24be <main+0x91e>
    24c2:	fe 01       	movw	r30, r28
    24c4:	ed 59       	subi	r30, 0x9D	; 157
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	80 83       	st	Z, r24

_delay_ms(150);

pwm1(0); // stop to record the reading
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <pwm1>
pwm2(0);
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <pwm2>

left_dis =distance;
    24d8:	fe 01       	movw	r30, r28
    24da:	eb 55       	subi	r30, 0x5B	; 91
    24dc:	ff 4f       	sbci	r31, 0xFF	; 255
    24de:	60 81       	ld	r22, Z
    24e0:	71 81       	ldd	r23, Z+1	; 0x01
    24e2:	82 81       	ldd	r24, Z+2	; 0x02
    24e4:	93 81       	ldd	r25, Z+3	; 0x03
    24e6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	80 93 84 01 	sts	0x0184, r24
    24f2:	fe 01       	movw	r30, r28
    24f4:	e1 5a       	subi	r30, 0xA1	; 161
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a6 e1       	ldi	r26, 0x16	; 22
    24fe:	b3 e4       	ldi	r27, 0x43	; 67
    2500:	80 83       	st	Z, r24
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	a2 83       	std	Z+2, r26	; 0x02
    2506:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2508:	8e 01       	movw	r16, r28
    250a:	05 5a       	subi	r16, 0xA5	; 165
    250c:	1f 4f       	sbci	r17, 0xFF	; 255
    250e:	fe 01       	movw	r30, r28
    2510:	e1 5a       	subi	r30, 0xA1	; 161
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a e7       	ldi	r20, 0x7A	; 122
    2522:	53 e4       	ldi	r21, 0x43	; 67
    2524:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	f8 01       	movw	r30, r16
    252e:	80 83       	st	Z, r24
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	a2 83       	std	Z+2, r26	; 0x02
    2534:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2536:	fe 01       	movw	r30, r28
    2538:	e5 5a       	subi	r30, 0xA5	; 165
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	60 81       	ld	r22, Z
    253e:	71 81       	ldd	r23, Z+1	; 0x01
    2540:	82 81       	ldd	r24, Z+2	; 0x02
    2542:	93 81       	ldd	r25, Z+3	; 0x03
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	44 f4       	brge	.+16     	; 0x2564 <main+0x9c4>
		__ticks = 1;
    2554:	fe 01       	movw	r30, r28
    2556:	e7 5a       	subi	r30, 0xA7	; 167
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    2562:	64 c0       	rjmp	.+200    	; 0x262c <main+0xa8c>
	else if (__tmp > 65535)
    2564:	fe 01       	movw	r30, r28
    2566:	e5 5a       	subi	r30, 0xA5	; 165
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	60 81       	ld	r22, Z
    256c:	71 81       	ldd	r23, Z+1	; 0x01
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	93 81       	ldd	r25, Z+3	; 0x03
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	4f e7       	ldi	r20, 0x7F	; 127
    2578:	57 e4       	ldi	r21, 0x47	; 71
    257a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    257e:	18 16       	cp	r1, r24
    2580:	0c f0       	brlt	.+2      	; 0x2584 <main+0x9e4>
    2582:	43 c0       	rjmp	.+134    	; 0x260a <main+0xa6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2584:	fe 01       	movw	r30, r28
    2586:	e1 5a       	subi	r30, 0xA1	; 161
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e2       	ldi	r20, 0x20	; 32
    2598:	51 e4       	ldi	r21, 0x41	; 65
    259a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	8e 01       	movw	r16, r28
    25a4:	07 5a       	subi	r16, 0xA7	; 167
    25a6:	1f 4f       	sbci	r17, 0xFF	; 255
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	f8 01       	movw	r30, r16
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	80 83       	st	Z, r24
    25ba:	1f c0       	rjmp	.+62     	; 0x25fa <main+0xa5a>
    25bc:	fe 01       	movw	r30, r28
    25be:	e9 5a       	subi	r30, 0xA9	; 169
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	89 e1       	ldi	r24, 0x19	; 25
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	80 83       	st	Z, r24
    25ca:	fe 01       	movw	r30, r28
    25cc:	e9 5a       	subi	r30, 0xA9	; 169
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <main+0xa34>
    25d8:	fe 01       	movw	r30, r28
    25da:	e9 5a       	subi	r30, 0xA9	; 169
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	91 83       	std	Z+1, r25	; 0x01
    25e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e2:	de 01       	movw	r26, r28
    25e4:	a7 5a       	subi	r26, 0xA7	; 167
    25e6:	bf 4f       	sbci	r27, 0xFF	; 255
    25e8:	fe 01       	movw	r30, r28
    25ea:	e7 5a       	subi	r30, 0xA7	; 167
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	80 81       	ld	r24, Z
    25f0:	91 81       	ldd	r25, Z+1	; 0x01
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	11 96       	adiw	r26, 0x01	; 1
    25f6:	9c 93       	st	X, r25
    25f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fa:	fe 01       	movw	r30, r28
    25fc:	e7 5a       	subi	r30, 0xA7	; 167
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 81       	ld	r24, Z
    2602:	91 81       	ldd	r25, Z+1	; 0x01
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	d1 f6       	brne	.-76     	; 0x25bc <main+0xa1c>
    2608:	27 c0       	rjmp	.+78     	; 0x2658 <main+0xab8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260a:	8e 01       	movw	r16, r28
    260c:	07 5a       	subi	r16, 0xA7	; 167
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	fe 01       	movw	r30, r28
    2612:	e5 5a       	subi	r30, 0xA5	; 165
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	60 81       	ld	r22, Z
    2618:	71 81       	ldd	r23, Z+1	; 0x01
    261a:	82 81       	ldd	r24, Z+2	; 0x02
    261c:	93 81       	ldd	r25, Z+3	; 0x03
    261e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	f8 01       	movw	r30, r16
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24
    262c:	de 01       	movw	r26, r28
    262e:	ab 5a       	subi	r26, 0xAB	; 171
    2630:	bf 4f       	sbci	r27, 0xFF	; 255
    2632:	fe 01       	movw	r30, r28
    2634:	e7 5a       	subi	r30, 0xA7	; 167
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	80 81       	ld	r24, Z
    263a:	91 81       	ldd	r25, Z+1	; 0x01
    263c:	8d 93       	st	X+, r24
    263e:	9c 93       	st	X, r25
    2640:	fe 01       	movw	r30, r28
    2642:	eb 5a       	subi	r30, 0xAB	; 171
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 81       	ld	r24, Z
    2648:	91 81       	ldd	r25, Z+1	; 0x01
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <main+0xaaa>
    264e:	fe 01       	movw	r30, r28
    2650:	eb 5a       	subi	r30, 0xAB	; 171
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24

_delay_ms(150);

pwm1_backward(250); //go back to normal location
    2658:	8a ef       	ldi	r24, 0xFA	; 250
    265a:	0e 94 01 17 	call	0x2e02	; 0x2e02 <pwm1_backward>
pwm2_backward(100);
    265e:	84 e6       	ldi	r24, 0x64	; 100
    2660:	0e 94 44 17 	call	0x2e88	; 0x2e88 <pwm2_backward>
    2664:	fe 01       	movw	r30, r28
    2666:	ef 5a       	subi	r30, 0xAF	; 175
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a6 e1       	ldi	r26, 0x16	; 22
    2670:	b3 e4       	ldi	r27, 0x43	; 67
    2672:	80 83       	st	Z, r24
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	a2 83       	std	Z+2, r26	; 0x02
    2678:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	8e 01       	movw	r16, r28
    267c:	03 5b       	subi	r16, 0xB3	; 179
    267e:	1f 4f       	sbci	r17, 0xFF	; 255
    2680:	fe 01       	movw	r30, r28
    2682:	ef 5a       	subi	r30, 0xAF	; 175
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	60 81       	ld	r22, Z
    2688:	71 81       	ldd	r23, Z+1	; 0x01
    268a:	82 81       	ldd	r24, Z+2	; 0x02
    268c:	93 81       	ldd	r25, Z+3	; 0x03
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	4a e7       	ldi	r20, 0x7A	; 122
    2694:	53 e4       	ldi	r21, 0x43	; 67
    2696:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	f8 01       	movw	r30, r16
    26a0:	80 83       	st	Z, r24
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	a2 83       	std	Z+2, r26	; 0x02
    26a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26a8:	fe 01       	movw	r30, r28
    26aa:	e3 5b       	subi	r30, 0xB3	; 179
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	60 81       	ld	r22, Z
    26b0:	71 81       	ldd	r23, Z+1	; 0x01
    26b2:	82 81       	ldd	r24, Z+2	; 0x02
    26b4:	93 81       	ldd	r25, Z+3	; 0x03
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e8       	ldi	r20, 0x80	; 128
    26bc:	5f e3       	ldi	r21, 0x3F	; 63
    26be:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    26c2:	88 23       	and	r24, r24
    26c4:	44 f4       	brge	.+16     	; 0x26d6 <main+0xb36>
		__ticks = 1;
    26c6:	fe 01       	movw	r30, r28
    26c8:	e5 5b       	subi	r30, 0xB5	; 181
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	91 83       	std	Z+1, r25	; 0x01
    26d2:	80 83       	st	Z, r24
    26d4:	64 c0       	rjmp	.+200    	; 0x279e <main+0xbfe>
	else if (__tmp > 65535)
    26d6:	fe 01       	movw	r30, r28
    26d8:	e3 5b       	subi	r30, 0xB3	; 179
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	60 81       	ld	r22, Z
    26de:	71 81       	ldd	r23, Z+1	; 0x01
    26e0:	82 81       	ldd	r24, Z+2	; 0x02
    26e2:	93 81       	ldd	r25, Z+3	; 0x03
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	3f ef       	ldi	r19, 0xFF	; 255
    26e8:	4f e7       	ldi	r20, 0x7F	; 127
    26ea:	57 e4       	ldi	r21, 0x47	; 71
    26ec:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    26f0:	18 16       	cp	r1, r24
    26f2:	0c f0       	brlt	.+2      	; 0x26f6 <main+0xb56>
    26f4:	43 c0       	rjmp	.+134    	; 0x277c <main+0xbdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f6:	fe 01       	movw	r30, r28
    26f8:	ef 5a       	subi	r30, 0xAF	; 175
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	60 81       	ld	r22, Z
    26fe:	71 81       	ldd	r23, Z+1	; 0x01
    2700:	82 81       	ldd	r24, Z+2	; 0x02
    2702:	93 81       	ldd	r25, Z+3	; 0x03
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e2       	ldi	r20, 0x20	; 32
    270a:	51 e4       	ldi	r21, 0x41	; 65
    270c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	8e 01       	movw	r16, r28
    2716:	05 5b       	subi	r16, 0xB5	; 181
    2718:	1f 4f       	sbci	r17, 0xFF	; 255
    271a:	bc 01       	movw	r22, r24
    271c:	cd 01       	movw	r24, r26
    271e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	f8 01       	movw	r30, r16
    2728:	91 83       	std	Z+1, r25	; 0x01
    272a:	80 83       	st	Z, r24
    272c:	1f c0       	rjmp	.+62     	; 0x276c <main+0xbcc>
    272e:	fe 01       	movw	r30, r28
    2730:	e7 5b       	subi	r30, 0xB7	; 183
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	89 e1       	ldi	r24, 0x19	; 25
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	80 83       	st	Z, r24
    273c:	fe 01       	movw	r30, r28
    273e:	e7 5b       	subi	r30, 0xB7	; 183
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	80 81       	ld	r24, Z
    2744:	91 81       	ldd	r25, Z+1	; 0x01
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <main+0xba6>
    274a:	fe 01       	movw	r30, r28
    274c:	e7 5b       	subi	r30, 0xB7	; 183
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2754:	de 01       	movw	r26, r28
    2756:	a5 5b       	subi	r26, 0xB5	; 181
    2758:	bf 4f       	sbci	r27, 0xFF	; 255
    275a:	fe 01       	movw	r30, r28
    275c:	e5 5b       	subi	r30, 0xB5	; 181
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	80 81       	ld	r24, Z
    2762:	91 81       	ldd	r25, Z+1	; 0x01
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	11 96       	adiw	r26, 0x01	; 1
    2768:	9c 93       	st	X, r25
    276a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276c:	fe 01       	movw	r30, r28
    276e:	e5 5b       	subi	r30, 0xB5	; 181
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 81       	ld	r24, Z
    2774:	91 81       	ldd	r25, Z+1	; 0x01
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	d1 f6       	brne	.-76     	; 0x272e <main+0xb8e>
    277a:	27 c0       	rjmp	.+78     	; 0x27ca <main+0xc2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    277c:	8e 01       	movw	r16, r28
    277e:	05 5b       	subi	r16, 0xB5	; 181
    2780:	1f 4f       	sbci	r17, 0xFF	; 255
    2782:	fe 01       	movw	r30, r28
    2784:	e3 5b       	subi	r30, 0xB3	; 179
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	60 81       	ld	r22, Z
    278a:	71 81       	ldd	r23, Z+1	; 0x01
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	93 81       	ldd	r25, Z+3	; 0x03
    2790:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	f8 01       	movw	r30, r16
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	80 83       	st	Z, r24
    279e:	de 01       	movw	r26, r28
    27a0:	a9 5b       	subi	r26, 0xB9	; 185
    27a2:	bf 4f       	sbci	r27, 0xFF	; 255
    27a4:	fe 01       	movw	r30, r28
    27a6:	e5 5b       	subi	r30, 0xB5	; 181
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 81       	ld	r24, Z
    27ac:	91 81       	ldd	r25, Z+1	; 0x01
    27ae:	8d 93       	st	X+, r24
    27b0:	9c 93       	st	X, r25
    27b2:	fe 01       	movw	r30, r28
    27b4:	e9 5b       	subi	r30, 0xB9	; 185
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	80 81       	ld	r24, Z
    27ba:	91 81       	ldd	r25, Z+1	; 0x01
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <main+0xc1c>
    27c0:	fe 01       	movw	r30, r28
    27c2:	e9 5b       	subi	r30, 0xB9	; 185
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	91 83       	std	Z+1, r25	; 0x01
    27c8:	80 83       	st	Z, r24

_delay_ms(150);

pwm1(0);// brakes
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <pwm1>
pwm2(0);
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <pwm2>
    27d6:	fe 01       	movw	r30, r28
    27d8:	ed 5b       	subi	r30, 0xBD	; 189
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a6 e1       	ldi	r26, 0x16	; 22
    27e2:	b3 e4       	ldi	r27, 0x43	; 67
    27e4:	80 83       	st	Z, r24
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	a2 83       	std	Z+2, r26	; 0x02
    27ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ec:	8e 01       	movw	r16, r28
    27ee:	01 5c       	subi	r16, 0xC1	; 193
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	fe 01       	movw	r30, r28
    27f4:	ed 5b       	subi	r30, 0xBD	; 189
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	4a e7       	ldi	r20, 0x7A	; 122
    2806:	53 e4       	ldi	r21, 0x43	; 67
    2808:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	f8 01       	movw	r30, r16
    2812:	80 83       	st	Z, r24
    2814:	91 83       	std	Z+1, r25	; 0x01
    2816:	a2 83       	std	Z+2, r26	; 0x02
    2818:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    281a:	fe 01       	movw	r30, r28
    281c:	ff 96       	adiw	r30, 0x3f	; 63
    281e:	60 81       	ld	r22, Z
    2820:	71 81       	ldd	r23, Z+1	; 0x01
    2822:	82 81       	ldd	r24, Z+2	; 0x02
    2824:	93 81       	ldd	r25, Z+3	; 0x03
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e8       	ldi	r20, 0x80	; 128
    282c:	5f e3       	ldi	r21, 0x3F	; 63
    282e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2832:	88 23       	and	r24, r24
    2834:	2c f4       	brge	.+10     	; 0x2840 <main+0xca0>
		__ticks = 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	9e af       	std	Y+62, r25	; 0x3e
    283c:	8d af       	std	Y+61, r24	; 0x3d
    283e:	46 c0       	rjmp	.+140    	; 0x28cc <main+0xd2c>
	else if (__tmp > 65535)
    2840:	fe 01       	movw	r30, r28
    2842:	ff 96       	adiw	r30, 0x3f	; 63
    2844:	60 81       	ld	r22, Z
    2846:	71 81       	ldd	r23, Z+1	; 0x01
    2848:	82 81       	ldd	r24, Z+2	; 0x02
    284a:	93 81       	ldd	r25, Z+3	; 0x03
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	3f ef       	ldi	r19, 0xFF	; 255
    2850:	4f e7       	ldi	r20, 0x7F	; 127
    2852:	57 e4       	ldi	r21, 0x47	; 71
    2854:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2858:	18 16       	cp	r1, r24
    285a:	64 f5       	brge	.+88     	; 0x28b4 <main+0xd14>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	fe 01       	movw	r30, r28
    285e:	ed 5b       	subi	r30, 0xBD	; 189
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	82 81       	ldd	r24, Z+2	; 0x02
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e2       	ldi	r20, 0x20	; 32
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	9e af       	std	Y+62, r25	; 0x3e
    2888:	8d af       	std	Y+61, r24	; 0x3d
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <main+0xd0a>
    288c:	89 e1       	ldi	r24, 0x19	; 25
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	9c af       	std	Y+60, r25	; 0x3c
    2892:	8b af       	std	Y+59, r24	; 0x3b
    2894:	8b ad       	ldd	r24, Y+59	; 0x3b
    2896:	9c ad       	ldd	r25, Y+60	; 0x3c
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <main+0xcf8>
    289c:	9c af       	std	Y+60, r25	; 0x3c
    289e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    28a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	9e af       	std	Y+62, r25	; 0x3e
    28a8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    28ac:	9e ad       	ldd	r25, Y+62	; 0x3e
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	69 f7       	brne	.-38     	; 0x288c <main+0xcec>
    28b2:	16 c0       	rjmp	.+44     	; 0x28e0 <main+0xd40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b4:	fe 01       	movw	r30, r28
    28b6:	ff 96       	adiw	r30, 0x3f	; 63
    28b8:	60 81       	ld	r22, Z
    28ba:	71 81       	ldd	r23, Z+1	; 0x01
    28bc:	82 81       	ldd	r24, Z+2	; 0x02
    28be:	93 81       	ldd	r25, Z+3	; 0x03
    28c0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	9e af       	std	Y+62, r25	; 0x3e
    28ca:	8d af       	std	Y+61, r24	; 0x3d
    28cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    28ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    28d0:	9a af       	std	Y+58, r25	; 0x3a
    28d2:	89 af       	std	Y+57, r24	; 0x39
    28d4:	89 ad       	ldd	r24, Y+57	; 0x39
    28d6:	9a ad       	ldd	r25, Y+58	; 0x3a
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <main+0xd38>
    28dc:	9a af       	std	Y+58, r25	; 0x3a
    28de:	89 af       	std	Y+57, r24	; 0x39

_delay_ms(150);

pwm2(250); //turn right
    28e0:	8a ef       	ldi	r24, 0xFA	; 250
    28e2:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <pwm2>
pwm1(100);
    28e6:	84 e6       	ldi	r24, 0x64	; 100
    28e8:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <pwm1>
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	a6 e1       	ldi	r26, 0x16	; 22
    28f2:	b3 e4       	ldi	r27, 0x43	; 67
    28f4:	8d ab       	std	Y+53, r24	; 0x35
    28f6:	9e ab       	std	Y+54, r25	; 0x36
    28f8:	af ab       	std	Y+55, r26	; 0x37
    28fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fc:	6d a9       	ldd	r22, Y+53	; 0x35
    28fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2900:	8f a9       	ldd	r24, Y+55	; 0x37
    2902:	98 ad       	ldd	r25, Y+56	; 0x38
    2904:	20 e0       	ldi	r18, 0x00	; 0
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	4a e7       	ldi	r20, 0x7A	; 122
    290a:	53 e4       	ldi	r21, 0x43	; 67
    290c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	89 ab       	std	Y+49, r24	; 0x31
    2916:	9a ab       	std	Y+50, r25	; 0x32
    2918:	ab ab       	std	Y+51, r26	; 0x33
    291a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    291c:	69 a9       	ldd	r22, Y+49	; 0x31
    291e:	7a a9       	ldd	r23, Y+50	; 0x32
    2920:	8b a9       	ldd	r24, Y+51	; 0x33
    2922:	9c a9       	ldd	r25, Y+52	; 0x34
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	40 e8       	ldi	r20, 0x80	; 128
    292a:	5f e3       	ldi	r21, 0x3F	; 63
    292c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2930:	88 23       	and	r24, r24
    2932:	2c f4       	brge	.+10     	; 0x293e <main+0xd9e>
		__ticks = 1;
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	98 ab       	std	Y+48, r25	; 0x30
    293a:	8f a7       	std	Y+47, r24	; 0x2f
    293c:	3f c0       	rjmp	.+126    	; 0x29bc <main+0xe1c>
	else if (__tmp > 65535)
    293e:	69 a9       	ldd	r22, Y+49	; 0x31
    2940:	7a a9       	ldd	r23, Y+50	; 0x32
    2942:	8b a9       	ldd	r24, Y+51	; 0x33
    2944:	9c a9       	ldd	r25, Y+52	; 0x34
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	3f ef       	ldi	r19, 0xFF	; 255
    294a:	4f e7       	ldi	r20, 0x7F	; 127
    294c:	57 e4       	ldi	r21, 0x47	; 71
    294e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2952:	18 16       	cp	r1, r24
    2954:	4c f5       	brge	.+82     	; 0x29a8 <main+0xe08>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2956:	6d a9       	ldd	r22, Y+53	; 0x35
    2958:	7e a9       	ldd	r23, Y+54	; 0x36
    295a:	8f a9       	ldd	r24, Y+55	; 0x37
    295c:	98 ad       	ldd	r25, Y+56	; 0x38
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	40 e2       	ldi	r20, 0x20	; 32
    2964:	51 e4       	ldi	r21, 0x41	; 65
    2966:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	bc 01       	movw	r22, r24
    2970:	cd 01       	movw	r24, r26
    2972:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	98 ab       	std	Y+48, r25	; 0x30
    297c:	8f a7       	std	Y+47, r24	; 0x2f
    297e:	0f c0       	rjmp	.+30     	; 0x299e <main+0xdfe>
    2980:	89 e1       	ldi	r24, 0x19	; 25
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	9e a7       	std	Y+46, r25	; 0x2e
    2986:	8d a7       	std	Y+45, r24	; 0x2d
    2988:	8d a5       	ldd	r24, Y+45	; 0x2d
    298a:	9e a5       	ldd	r25, Y+46	; 0x2e
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	f1 f7       	brne	.-4      	; 0x298c <main+0xdec>
    2990:	9e a7       	std	Y+46, r25	; 0x2e
    2992:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2994:	8f a5       	ldd	r24, Y+47	; 0x2f
    2996:	98 a9       	ldd	r25, Y+48	; 0x30
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	98 ab       	std	Y+48, r25	; 0x30
    299c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299e:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a0:	98 a9       	ldd	r25, Y+48	; 0x30
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	69 f7       	brne	.-38     	; 0x2980 <main+0xde0>
    29a6:	14 c0       	rjmp	.+40     	; 0x29d0 <main+0xe30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a8:	69 a9       	ldd	r22, Y+49	; 0x31
    29aa:	7a a9       	ldd	r23, Y+50	; 0x32
    29ac:	8b a9       	ldd	r24, Y+51	; 0x33
    29ae:	9c a9       	ldd	r25, Y+52	; 0x34
    29b0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	98 ab       	std	Y+48, r25	; 0x30
    29ba:	8f a7       	std	Y+47, r24	; 0x2f
    29bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    29be:	98 a9       	ldd	r25, Y+48	; 0x30
    29c0:	9c a7       	std	Y+44, r25	; 0x2c
    29c2:	8b a7       	std	Y+43, r24	; 0x2b
    29c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    29c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <main+0xe28>
    29cc:	9c a7       	std	Y+44, r25	; 0x2c
    29ce:	8b a7       	std	Y+43, r24	; 0x2b

_delay_ms(150);

pwm1(0); // stop to record the readings
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <pwm1>
pwm2(0);
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <pwm2>

right_dis =distance;
    29dc:	fe 01       	movw	r30, r28
    29de:	eb 55       	subi	r30, 0x5B	; 91
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	80 93 85 01 	sts	0x0185, r24
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	a6 e1       	ldi	r26, 0x16	; 22
    29fc:	b3 e4       	ldi	r27, 0x43	; 67
    29fe:	8f a3       	std	Y+39, r24	; 0x27
    2a00:	98 a7       	std	Y+40, r25	; 0x28
    2a02:	a9 a7       	std	Y+41, r26	; 0x29
    2a04:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a06:	6f a1       	ldd	r22, Y+39	; 0x27
    2a08:	78 a5       	ldd	r23, Y+40	; 0x28
    2a0a:	89 a5       	ldd	r24, Y+41	; 0x29
    2a0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	4a e7       	ldi	r20, 0x7A	; 122
    2a14:	53 e4       	ldi	r21, 0x43	; 67
    2a16:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	8b a3       	std	Y+35, r24	; 0x23
    2a20:	9c a3       	std	Y+36, r25	; 0x24
    2a22:	ad a3       	std	Y+37, r26	; 0x25
    2a24:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a26:	6b a1       	ldd	r22, Y+35	; 0x23
    2a28:	7c a1       	ldd	r23, Y+36	; 0x24
    2a2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	40 e8       	ldi	r20, 0x80	; 128
    2a34:	5f e3       	ldi	r21, 0x3F	; 63
    2a36:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2a3a:	88 23       	and	r24, r24
    2a3c:	2c f4       	brge	.+10     	; 0x2a48 <main+0xea8>
		__ticks = 1;
    2a3e:	81 e0       	ldi	r24, 0x01	; 1
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	9a a3       	std	Y+34, r25	; 0x22
    2a44:	89 a3       	std	Y+33, r24	; 0x21
    2a46:	3f c0       	rjmp	.+126    	; 0x2ac6 <main+0xf26>
	else if (__tmp > 65535)
    2a48:	6b a1       	ldd	r22, Y+35	; 0x23
    2a4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	3f ef       	ldi	r19, 0xFF	; 255
    2a54:	4f e7       	ldi	r20, 0x7F	; 127
    2a56:	57 e4       	ldi	r21, 0x47	; 71
    2a58:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2a5c:	18 16       	cp	r1, r24
    2a5e:	4c f5       	brge	.+82     	; 0x2ab2 <main+0xf12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a60:	6f a1       	ldd	r22, Y+39	; 0x27
    2a62:	78 a5       	ldd	r23, Y+40	; 0x28
    2a64:	89 a5       	ldd	r24, Y+41	; 0x29
    2a66:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	40 e2       	ldi	r20, 0x20	; 32
    2a6e:	51 e4       	ldi	r21, 0x41	; 65
    2a70:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	bc 01       	movw	r22, r24
    2a7a:	cd 01       	movw	r24, r26
    2a7c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	9a a3       	std	Y+34, r25	; 0x22
    2a86:	89 a3       	std	Y+33, r24	; 0x21
    2a88:	0f c0       	rjmp	.+30     	; 0x2aa8 <main+0xf08>
    2a8a:	89 e1       	ldi	r24, 0x19	; 25
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	98 a3       	std	Y+32, r25	; 0x20
    2a90:	8f 8f       	std	Y+31, r24	; 0x1f
    2a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a94:	98 a1       	ldd	r25, Y+32	; 0x20
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	f1 f7       	brne	.-4      	; 0x2a96 <main+0xef6>
    2a9a:	98 a3       	std	Y+32, r25	; 0x20
    2a9c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a9e:	89 a1       	ldd	r24, Y+33	; 0x21
    2aa0:	9a a1       	ldd	r25, Y+34	; 0x22
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	9a a3       	std	Y+34, r25	; 0x22
    2aa6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa8:	89 a1       	ldd	r24, Y+33	; 0x21
    2aaa:	9a a1       	ldd	r25, Y+34	; 0x22
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	69 f7       	brne	.-38     	; 0x2a8a <main+0xeea>
    2ab0:	14 c0       	rjmp	.+40     	; 0x2ada <main+0xf3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ab4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ab6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab8:	9e a1       	ldd	r25, Y+38	; 0x26
    2aba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	9a a3       	std	Y+34, r25	; 0x22
    2ac4:	89 a3       	std	Y+33, r24	; 0x21
    2ac6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aca:	9e 8f       	std	Y+30, r25	; 0x1e
    2acc:	8d 8f       	std	Y+29, r24	; 0x1d
    2ace:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ad0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ad2:	01 97       	sbiw	r24, 0x01	; 1
    2ad4:	f1 f7       	brne	.-4      	; 0x2ad2 <main+0xf32>
    2ad6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ad8:	8d 8f       	std	Y+29, r24	; 0x1d

_delay_ms(150);

pwm2_backward(250); // go back to normal location
    2ada:	8a ef       	ldi	r24, 0xFA	; 250
    2adc:	0e 94 44 17 	call	0x2e88	; 0x2e88 <pwm2_backward>
pwm1_backward(100);
    2ae0:	84 e6       	ldi	r24, 0x64	; 100
    2ae2:	0e 94 01 17 	call	0x2e02	; 0x2e02 <pwm1_backward>
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	a6 e1       	ldi	r26, 0x16	; 22
    2aec:	b3 e4       	ldi	r27, 0x43	; 67
    2aee:	89 8f       	std	Y+25, r24	; 0x19
    2af0:	9a 8f       	std	Y+26, r25	; 0x1a
    2af2:	ab 8f       	std	Y+27, r26	; 0x1b
    2af4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af6:	69 8d       	ldd	r22, Y+25	; 0x19
    2af8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2afa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2afc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	4a e7       	ldi	r20, 0x7A	; 122
    2b04:	53 e4       	ldi	r21, 0x43	; 67
    2b06:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	8d 8b       	std	Y+21, r24	; 0x15
    2b10:	9e 8b       	std	Y+22, r25	; 0x16
    2b12:	af 8b       	std	Y+23, r26	; 0x17
    2b14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b16:	6d 89       	ldd	r22, Y+21	; 0x15
    2b18:	7e 89       	ldd	r23, Y+22	; 0x16
    2b1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e8       	ldi	r20, 0x80	; 128
    2b24:	5f e3       	ldi	r21, 0x3F	; 63
    2b26:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2b2a:	88 23       	and	r24, r24
    2b2c:	2c f4       	brge	.+10     	; 0x2b38 <main+0xf98>
		__ticks = 1;
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	9c 8b       	std	Y+20, r25	; 0x14
    2b34:	8b 8b       	std	Y+19, r24	; 0x13
    2b36:	3f c0       	rjmp	.+126    	; 0x2bb6 <main+0x1016>
	else if (__tmp > 65535)
    2b38:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	3f ef       	ldi	r19, 0xFF	; 255
    2b44:	4f e7       	ldi	r20, 0x7F	; 127
    2b46:	57 e4       	ldi	r21, 0x47	; 71
    2b48:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2b4c:	18 16       	cp	r1, r24
    2b4e:	4c f5       	brge	.+82     	; 0x2ba2 <main+0x1002>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b50:	69 8d       	ldd	r22, Y+25	; 0x19
    2b52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e2       	ldi	r20, 0x20	; 32
    2b5e:	51 e4       	ldi	r21, 0x41	; 65
    2b60:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	bc 01       	movw	r22, r24
    2b6a:	cd 01       	movw	r24, r26
    2b6c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	9c 8b       	std	Y+20, r25	; 0x14
    2b76:	8b 8b       	std	Y+19, r24	; 0x13
    2b78:	0f c0       	rjmp	.+30     	; 0x2b98 <main+0xff8>
    2b7a:	89 e1       	ldi	r24, 0x19	; 25
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	9a 8b       	std	Y+18, r25	; 0x12
    2b80:	89 8b       	std	Y+17, r24	; 0x11
    2b82:	89 89       	ldd	r24, Y+17	; 0x11
    2b84:	9a 89       	ldd	r25, Y+18	; 0x12
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <main+0xfe6>
    2b8a:	9a 8b       	std	Y+18, r25	; 0x12
    2b8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b90:	9c 89       	ldd	r25, Y+20	; 0x14
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	9c 8b       	std	Y+20, r25	; 0x14
    2b96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b98:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b9c:	00 97       	sbiw	r24, 0x00	; 0
    2b9e:	69 f7       	brne	.-38     	; 0x2b7a <main+0xfda>
    2ba0:	14 c0       	rjmp	.+40     	; 0x2bca <main+0x102a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    2baa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	9c 8b       	std	Y+20, r25	; 0x14
    2bb4:	8b 8b       	std	Y+19, r24	; 0x13
    2bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bba:	98 8b       	std	Y+16, r25	; 0x10
    2bbc:	8f 87       	std	Y+15, r24	; 0x0f
    2bbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bc0:	98 89       	ldd	r25, Y+16	; 0x10
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <main+0x1022>
    2bc6:	98 8b       	std	Y+16, r25	; 0x10
    2bc8:	8f 87       	std	Y+15, r24	; 0x0f

_delay_ms(150);

pwm1(0); //brake to take a decision
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <pwm1>
pwm2(0);
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <pwm2>
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	a6 e1       	ldi	r26, 0x16	; 22
    2bdc:	b3 e4       	ldi	r27, 0x43	; 67
    2bde:	8b 87       	std	Y+11, r24	; 0x0b
    2be0:	9c 87       	std	Y+12, r25	; 0x0c
    2be2:	ad 87       	std	Y+13, r26	; 0x0d
    2be4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	4a e7       	ldi	r20, 0x7A	; 122
    2bf4:	53 e4       	ldi	r21, 0x43	; 67
    2bf6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	8f 83       	std	Y+7, r24	; 0x07
    2c00:	98 87       	std	Y+8, r25	; 0x08
    2c02:	a9 87       	std	Y+9, r26	; 0x09
    2c04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c06:	6f 81       	ldd	r22, Y+7	; 0x07
    2c08:	78 85       	ldd	r23, Y+8	; 0x08
    2c0a:	89 85       	ldd	r24, Y+9	; 0x09
    2c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e8       	ldi	r20, 0x80	; 128
    2c14:	5f e3       	ldi	r21, 0x3F	; 63
    2c16:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2c1a:	88 23       	and	r24, r24
    2c1c:	2c f4       	brge	.+10     	; 0x2c28 <main+0x1088>
		__ticks = 1;
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	9e 83       	std	Y+6, r25	; 0x06
    2c24:	8d 83       	std	Y+5, r24	; 0x05
    2c26:	3f c0       	rjmp	.+126    	; 0x2ca6 <main+0x1106>
	else if (__tmp > 65535)
    2c28:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2a:	78 85       	ldd	r23, Y+8	; 0x08
    2c2c:	89 85       	ldd	r24, Y+9	; 0x09
    2c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	3f ef       	ldi	r19, 0xFF	; 255
    2c34:	4f e7       	ldi	r20, 0x7F	; 127
    2c36:	57 e4       	ldi	r21, 0x47	; 71
    2c38:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2c3c:	18 16       	cp	r1, r24
    2c3e:	4c f5       	brge	.+82     	; 0x2c92 <main+0x10f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e2       	ldi	r20, 0x20	; 32
    2c4e:	51 e4       	ldi	r21, 0x41	; 65
    2c50:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	bc 01       	movw	r22, r24
    2c5a:	cd 01       	movw	r24, r26
    2c5c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	9e 83       	std	Y+6, r25	; 0x06
    2c66:	8d 83       	std	Y+5, r24	; 0x05
    2c68:	0f c0       	rjmp	.+30     	; 0x2c88 <main+0x10e8>
    2c6a:	89 e1       	ldi	r24, 0x19	; 25
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	9c 83       	std	Y+4, r25	; 0x04
    2c70:	8b 83       	std	Y+3, r24	; 0x03
    2c72:	8b 81       	ldd	r24, Y+3	; 0x03
    2c74:	9c 81       	ldd	r25, Y+4	; 0x04
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <main+0x10d6>
    2c7a:	9c 83       	std	Y+4, r25	; 0x04
    2c7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c80:	9e 81       	ldd	r25, Y+6	; 0x06
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	9e 83       	std	Y+6, r25	; 0x06
    2c86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c88:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	69 f7       	brne	.-38     	; 0x2c6a <main+0x10ca>
    2c90:	14 c0       	rjmp	.+40     	; 0x2cba <main+0x111a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c92:	6f 81       	ldd	r22, Y+7	; 0x07
    2c94:	78 85       	ldd	r23, Y+8	; 0x08
    2c96:	89 85       	ldd	r24, Y+9	; 0x09
    2c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	9e 83       	std	Y+6, r25	; 0x06
    2ca4:	8d 83       	std	Y+5, r24	; 0x05
    2ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    2caa:	9a 83       	std	Y+2, r25	; 0x02
    2cac:	89 83       	std	Y+1, r24	; 0x01
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	f1 f7       	brne	.-4      	; 0x2cb2 <main+0x1112>
    2cb6:	9a 83       	std	Y+2, r25	; 0x02
    2cb8:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(150);

/*
 * check where is the nearest obstacle
 */
if (right_dis > left_dis  ){
    2cba:	90 91 85 01 	lds	r25, 0x0185
    2cbe:	80 91 84 01 	lds	r24, 0x0184
    2cc2:	89 17       	cp	r24, r25
    2cc4:	40 f4       	brcc	.+16     	; 0x2cd6 <main+0x1136>

	pwm2(250); //turn right
    2cc6:	8a ef       	ldi	r24, 0xFA	; 250
    2cc8:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <pwm2>
	pwm1(100);
    2ccc:	84 e6       	ldi	r24, 0x64	; 100
    2cce:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <pwm1>
    2cd2:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <main+0xd8>


}
else if (left_dis > right_dis){
    2cd6:	90 91 84 01 	lds	r25, 0x0184
    2cda:	80 91 85 01 	lds	r24, 0x0185
    2cde:	89 17       	cp	r24, r25
    2ce0:	10 f0       	brcs	.+4      	; 0x2ce6 <main+0x1146>
    2ce2:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <main+0xd8>

	pwm1(250); // turn left
    2ce6:	8a ef       	ldi	r24, 0xFA	; 250
    2ce8:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <pwm1>
	pwm2 (100);
    2cec:	84 e6       	ldi	r24, 0x64	; 100
    2cee:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <pwm2>
    2cf2:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <main+0xd8>

00002cf6 <pwm1>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include "motors_pwm.h"

void pwm1 (unsigned char X){
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	0f 92       	push	r0
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
    2d00:	89 83       	std	Y+1, r24	; 0x01
OCR0=X;
    2d02:	ec e5       	ldi	r30, 0x5C	; 92
    2d04:	f0 e0       	ldi	r31, 0x00	; 0
    2d06:	89 81       	ldd	r24, Y+1	; 0x01
    2d08:	80 83       	st	Z, r24
	TCCR0 =(1<<3)|(1<<6); //FAST PWM
    2d0a:	e3 e5       	ldi	r30, 0x53	; 83
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	88 e4       	ldi	r24, 0x48	; 72
    2d10:	80 83       	st	Z, r24
	TCCR0 |= (1<<5); // non inverting mode
    2d12:	a3 e5       	ldi	r26, 0x53	; 83
    2d14:	b0 e0       	ldi	r27, 0x00	; 0
    2d16:	e3 e5       	ldi	r30, 0x53	; 83
    2d18:	f0 e0       	ldi	r31, 0x00	; 0
    2d1a:	80 81       	ld	r24, Z
    2d1c:	80 62       	ori	r24, 0x20	; 32
    2d1e:	8c 93       	st	X, r24
	TCCR0 |= (1<<1); //PRESCALER =8
    2d20:	a3 e5       	ldi	r26, 0x53	; 83
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	e3 e5       	ldi	r30, 0x53	; 83
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	82 60       	ori	r24, 0x02	; 2
    2d2c:	8c 93       	st	X, r24
	DDRB |=(1<<3) ;
    2d2e:	a7 e3       	ldi	r26, 0x37	; 55
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	e7 e3       	ldi	r30, 0x37	; 55
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	88 60       	ori	r24, 0x08	; 8
    2d3a:	8c 93       	st	X, r24

	PORTC |= (1<<0);
    2d3c:	a5 e3       	ldi	r26, 0x35	; 53
    2d3e:	b0 e0       	ldi	r27, 0x00	; 0
    2d40:	e5 e3       	ldi	r30, 0x35	; 53
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	80 81       	ld	r24, Z
    2d46:	81 60       	ori	r24, 0x01	; 1
    2d48:	8c 93       	st	X, r24
	PORTC &= ~(1<<1);
    2d4a:	a5 e3       	ldi	r26, 0x35	; 53
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	e5 e3       	ldi	r30, 0x35	; 53
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	8d 7f       	andi	r24, 0xFD	; 253
    2d56:	8c 93       	st	X, r24


	PORTC |= (1<<2);
    2d58:	a5 e3       	ldi	r26, 0x35	; 53
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	e5 e3       	ldi	r30, 0x35	; 53
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	84 60       	ori	r24, 0x04	; 4
    2d64:	8c 93       	st	X, r24
	PORTC &= ~(1<<3);
    2d66:	a5 e3       	ldi	r26, 0x35	; 53
    2d68:	b0 e0       	ldi	r27, 0x00	; 0
    2d6a:	e5 e3       	ldi	r30, 0x35	; 53
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 81       	ld	r24, Z
    2d70:	87 7f       	andi	r24, 0xF7	; 247
    2d72:	8c 93       	st	X, r24

}
    2d74:	0f 90       	pop	r0
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	08 95       	ret

00002d7c <pwm2>:

void pwm2 (unsigned char Y){
    2d7c:	df 93       	push	r29
    2d7e:	cf 93       	push	r28
    2d80:	0f 92       	push	r0
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	89 83       	std	Y+1, r24	; 0x01
OCR2 =Y;
    2d88:	e3 e4       	ldi	r30, 0x43	; 67
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	89 81       	ldd	r24, Y+1	; 0x01
    2d8e:	80 83       	st	Z, r24
	TCCR2 =(1<<3)|(1<<6); //FAST PWM
    2d90:	e5 e4       	ldi	r30, 0x45	; 69
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	88 e4       	ldi	r24, 0x48	; 72
    2d96:	80 83       	st	Z, r24
	TCCR2 |= (1<<5);
    2d98:	a5 e4       	ldi	r26, 0x45	; 69
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	e5 e4       	ldi	r30, 0x45	; 69
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	80 62       	ori	r24, 0x20	; 32
    2da4:	8c 93       	st	X, r24
	TCCR2 |= (1<<1);
    2da6:	a5 e4       	ldi	r26, 0x45	; 69
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	e5 e4       	ldi	r30, 0x45	; 69
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	82 60       	ori	r24, 0x02	; 2
    2db2:	8c 93       	st	X, r24
    DDRD |=(1<<7);
    2db4:	a1 e3       	ldi	r26, 0x31	; 49
    2db6:	b0 e0       	ldi	r27, 0x00	; 0
    2db8:	e1 e3       	ldi	r30, 0x31	; 49
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	80 81       	ld	r24, Z
    2dbe:	80 68       	ori	r24, 0x80	; 128
    2dc0:	8c 93       	st	X, r24

	PORTC |= (1<<0);
    2dc2:	a5 e3       	ldi	r26, 0x35	; 53
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	e5 e3       	ldi	r30, 0x35	; 53
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	81 60       	ori	r24, 0x01	; 1
    2dce:	8c 93       	st	X, r24
	PORTC &= ~(1<<1);
    2dd0:	a5 e3       	ldi	r26, 0x35	; 53
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	e5 e3       	ldi	r30, 0x35	; 53
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	8d 7f       	andi	r24, 0xFD	; 253
    2ddc:	8c 93       	st	X, r24


	PORTC |= (1<<2);
    2dde:	a5 e3       	ldi	r26, 0x35	; 53
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	e5 e3       	ldi	r30, 0x35	; 53
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	84 60       	ori	r24, 0x04	; 4
    2dea:	8c 93       	st	X, r24
	PORTC &= ~(1<<3);
    2dec:	a5 e3       	ldi	r26, 0x35	; 53
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	e5 e3       	ldi	r30, 0x35	; 53
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	87 7f       	andi	r24, 0xF7	; 247
    2df8:	8c 93       	st	X, r24
}
    2dfa:	0f 90       	pop	r0
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <pwm1_backward>:

void pwm1_backward (unsigned char X){
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	0f 92       	push	r0
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
    2e0c:	89 83       	std	Y+1, r24	; 0x01
OCR0=X;
    2e0e:	ec e5       	ldi	r30, 0x5C	; 92
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	80 83       	st	Z, r24
	TCCR0 =(1<<3)|(1<<6); //FAST PWM
    2e16:	e3 e5       	ldi	r30, 0x53	; 83
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	88 e4       	ldi	r24, 0x48	; 72
    2e1c:	80 83       	st	Z, r24
	TCCR0 |= (1<<5); // non inverting mode
    2e1e:	a3 e5       	ldi	r26, 0x53	; 83
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	e3 e5       	ldi	r30, 0x53	; 83
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	80 62       	ori	r24, 0x20	; 32
    2e2a:	8c 93       	st	X, r24
	TCCR0 |= (1<<1); //PRESCALER =8
    2e2c:	a3 e5       	ldi	r26, 0x53	; 83
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	e3 e5       	ldi	r30, 0x53	; 83
    2e32:	f0 e0       	ldi	r31, 0x00	; 0
    2e34:	80 81       	ld	r24, Z
    2e36:	82 60       	ori	r24, 0x02	; 2
    2e38:	8c 93       	st	X, r24
	DDRB |=(1<<3) ;
    2e3a:	a7 e3       	ldi	r26, 0x37	; 55
    2e3c:	b0 e0       	ldi	r27, 0x00	; 0
    2e3e:	e7 e3       	ldi	r30, 0x37	; 55
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	80 81       	ld	r24, Z
    2e44:	88 60       	ori	r24, 0x08	; 8
    2e46:	8c 93       	st	X, r24

	PORTC &= ~(1<<0);
    2e48:	a5 e3       	ldi	r26, 0x35	; 53
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	e5 e3       	ldi	r30, 0x35	; 53
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	80 81       	ld	r24, Z
    2e52:	8e 7f       	andi	r24, 0xFE	; 254
    2e54:	8c 93       	st	X, r24
	PORTC |= (1<<1);
    2e56:	a5 e3       	ldi	r26, 0x35	; 53
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	e5 e3       	ldi	r30, 0x35	; 53
    2e5c:	f0 e0       	ldi	r31, 0x00	; 0
    2e5e:	80 81       	ld	r24, Z
    2e60:	82 60       	ori	r24, 0x02	; 2
    2e62:	8c 93       	st	X, r24

	PORTC &= ~(1<<2);
    2e64:	a5 e3       	ldi	r26, 0x35	; 53
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	e5 e3       	ldi	r30, 0x35	; 53
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	80 81       	ld	r24, Z
    2e6e:	8b 7f       	andi	r24, 0xFB	; 251
    2e70:	8c 93       	st	X, r24
	PORTC |= (1<<3);
    2e72:	a5 e3       	ldi	r26, 0x35	; 53
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	e5 e3       	ldi	r30, 0x35	; 53
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	80 81       	ld	r24, Z
    2e7c:	88 60       	ori	r24, 0x08	; 8
    2e7e:	8c 93       	st	X, r24
}
    2e80:	0f 90       	pop	r0
    2e82:	cf 91       	pop	r28
    2e84:	df 91       	pop	r29
    2e86:	08 95       	ret

00002e88 <pwm2_backward>:

void pwm2_backward (unsigned char Y){
    2e88:	df 93       	push	r29
    2e8a:	cf 93       	push	r28
    2e8c:	0f 92       	push	r0
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	89 83       	std	Y+1, r24	; 0x01
OCR2 =Y;
    2e94:	e3 e4       	ldi	r30, 0x43	; 67
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	80 83       	st	Z, r24
	TCCR2 =(1<<3)|(1<<6); //FAST PWM
    2e9c:	e5 e4       	ldi	r30, 0x45	; 69
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	88 e4       	ldi	r24, 0x48	; 72
    2ea2:	80 83       	st	Z, r24
	TCCR2 |= (1<<5);// non inverting mode
    2ea4:	a5 e4       	ldi	r26, 0x45	; 69
    2ea6:	b0 e0       	ldi	r27, 0x00	; 0
    2ea8:	e5 e4       	ldi	r30, 0x45	; 69
    2eaa:	f0 e0       	ldi	r31, 0x00	; 0
    2eac:	80 81       	ld	r24, Z
    2eae:	80 62       	ori	r24, 0x20	; 32
    2eb0:	8c 93       	st	X, r24
	TCCR2 |= (1<<1);//PRESCALER =8
    2eb2:	a5 e4       	ldi	r26, 0x45	; 69
    2eb4:	b0 e0       	ldi	r27, 0x00	; 0
    2eb6:	e5 e4       	ldi	r30, 0x45	; 69
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	80 81       	ld	r24, Z
    2ebc:	82 60       	ori	r24, 0x02	; 2
    2ebe:	8c 93       	st	X, r24
    DDRD |=(1<<7);
    2ec0:	a1 e3       	ldi	r26, 0x31	; 49
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	e1 e3       	ldi	r30, 0x31	; 49
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	80 81       	ld	r24, Z
    2eca:	80 68       	ori	r24, 0x80	; 128
    2ecc:	8c 93       	st	X, r24

    PORTC &= ~(1<<0);
    2ece:	a5 e3       	ldi	r26, 0x35	; 53
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	e5 e3       	ldi	r30, 0x35	; 53
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	80 81       	ld	r24, Z
    2ed8:	8e 7f       	andi	r24, 0xFE	; 254
    2eda:	8c 93       	st	X, r24
    PORTC |= (1<<1);
    2edc:	a5 e3       	ldi	r26, 0x35	; 53
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	e5 e3       	ldi	r30, 0x35	; 53
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	82 60       	ori	r24, 0x02	; 2
    2ee8:	8c 93       	st	X, r24

    PORTC &= ~(1<<2);
    2eea:	a5 e3       	ldi	r26, 0x35	; 53
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	e5 e3       	ldi	r30, 0x35	; 53
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	80 81       	ld	r24, Z
    2ef4:	8b 7f       	andi	r24, 0xFB	; 251
    2ef6:	8c 93       	st	X, r24
    PORTC |= (1<<3);
    2ef8:	a5 e3       	ldi	r26, 0x35	; 53
    2efa:	b0 e0       	ldi	r27, 0x00	; 0
    2efc:	e5 e3       	ldi	r30, 0x35	; 53
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	80 81       	ld	r24, Z
    2f02:	88 60       	ori	r24, 0x08	; 8
    2f04:	8c 93       	st	X, r24

}
    2f06:	0f 90       	pop	r0
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <__mulsi3>:
    2f0e:	62 9f       	mul	r22, r18
    2f10:	d0 01       	movw	r26, r0
    2f12:	73 9f       	mul	r23, r19
    2f14:	f0 01       	movw	r30, r0
    2f16:	82 9f       	mul	r24, r18
    2f18:	e0 0d       	add	r30, r0
    2f1a:	f1 1d       	adc	r31, r1
    2f1c:	64 9f       	mul	r22, r20
    2f1e:	e0 0d       	add	r30, r0
    2f20:	f1 1d       	adc	r31, r1
    2f22:	92 9f       	mul	r25, r18
    2f24:	f0 0d       	add	r31, r0
    2f26:	83 9f       	mul	r24, r19
    2f28:	f0 0d       	add	r31, r0
    2f2a:	74 9f       	mul	r23, r20
    2f2c:	f0 0d       	add	r31, r0
    2f2e:	65 9f       	mul	r22, r21
    2f30:	f0 0d       	add	r31, r0
    2f32:	99 27       	eor	r25, r25
    2f34:	72 9f       	mul	r23, r18
    2f36:	b0 0d       	add	r27, r0
    2f38:	e1 1d       	adc	r30, r1
    2f3a:	f9 1f       	adc	r31, r25
    2f3c:	63 9f       	mul	r22, r19
    2f3e:	b0 0d       	add	r27, r0
    2f40:	e1 1d       	adc	r30, r1
    2f42:	f9 1f       	adc	r31, r25
    2f44:	bd 01       	movw	r22, r26
    2f46:	cf 01       	movw	r24, r30
    2f48:	11 24       	eor	r1, r1
    2f4a:	08 95       	ret

00002f4c <__prologue_saves__>:
    2f4c:	2f 92       	push	r2
    2f4e:	3f 92       	push	r3
    2f50:	4f 92       	push	r4
    2f52:	5f 92       	push	r5
    2f54:	6f 92       	push	r6
    2f56:	7f 92       	push	r7
    2f58:	8f 92       	push	r8
    2f5a:	9f 92       	push	r9
    2f5c:	af 92       	push	r10
    2f5e:	bf 92       	push	r11
    2f60:	cf 92       	push	r12
    2f62:	df 92       	push	r13
    2f64:	ef 92       	push	r14
    2f66:	ff 92       	push	r15
    2f68:	0f 93       	push	r16
    2f6a:	1f 93       	push	r17
    2f6c:	cf 93       	push	r28
    2f6e:	df 93       	push	r29
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	ca 1b       	sub	r28, r26
    2f76:	db 0b       	sbc	r29, r27
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	09 94       	ijmp

00002f84 <__epilogue_restores__>:
    2f84:	2a 88       	ldd	r2, Y+18	; 0x12
    2f86:	39 88       	ldd	r3, Y+17	; 0x11
    2f88:	48 88       	ldd	r4, Y+16	; 0x10
    2f8a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f8c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f8e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f90:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f92:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f94:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f96:	b9 84       	ldd	r11, Y+9	; 0x09
    2f98:	c8 84       	ldd	r12, Y+8	; 0x08
    2f9a:	df 80       	ldd	r13, Y+7	; 0x07
    2f9c:	ee 80       	ldd	r14, Y+6	; 0x06
    2f9e:	fd 80       	ldd	r15, Y+5	; 0x05
    2fa0:	0c 81       	ldd	r16, Y+4	; 0x04
    2fa2:	1b 81       	ldd	r17, Y+3	; 0x03
    2fa4:	aa 81       	ldd	r26, Y+2	; 0x02
    2fa6:	b9 81       	ldd	r27, Y+1	; 0x01
    2fa8:	ce 0f       	add	r28, r30
    2faa:	d1 1d       	adc	r29, r1
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	de bf       	out	0x3e, r29	; 62
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	cd bf       	out	0x3d, r28	; 61
    2fb6:	ed 01       	movw	r28, r26
    2fb8:	08 95       	ret

00002fba <dtostrf>:
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	f2 2f       	mov	r31, r18
    2fc4:	f0 2e       	mov	r15, r16
    2fc6:	47 fd       	sbrc	r20, 7
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <dtostrf+0x14>
    2fca:	e4 e0       	ldi	r30, 0x04	; 4
    2fcc:	01 c0       	rjmp	.+2      	; 0x2fd0 <dtostrf+0x16>
    2fce:	e4 e1       	ldi	r30, 0x14	; 20
    2fd0:	24 2f       	mov	r18, r20
    2fd2:	33 27       	eor	r19, r19
    2fd4:	27 fd       	sbrc	r18, 7
    2fd6:	30 95       	com	r19
    2fd8:	37 ff       	sbrs	r19, 7
    2fda:	03 c0       	rjmp	.+6      	; 0x2fe2 <dtostrf+0x28>
    2fdc:	30 95       	com	r19
    2fde:	21 95       	neg	r18
    2fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe2:	4f 2d       	mov	r20, r15
    2fe4:	51 2f       	mov	r21, r17
    2fe6:	0f 2f       	mov	r16, r31
    2fe8:	ee 2e       	mov	r14, r30
    2fea:	0e 94 10 18 	call	0x3020	; 0x3020 <dtoa_prf>
    2fee:	8f 2d       	mov	r24, r15
    2ff0:	91 2f       	mov	r25, r17
    2ff2:	1f 91       	pop	r17
    2ff4:	0f 91       	pop	r16
    2ff6:	ff 90       	pop	r15
    2ff8:	ef 90       	pop	r14
    2ffa:	08 95       	ret

00002ffc <memcpy>:
    2ffc:	fb 01       	movw	r30, r22
    2ffe:	dc 01       	movw	r26, r24
    3000:	02 c0       	rjmp	.+4      	; 0x3006 <memcpy+0xa>
    3002:	01 90       	ld	r0, Z+
    3004:	0d 92       	st	X+, r0
    3006:	41 50       	subi	r20, 0x01	; 1
    3008:	50 40       	sbci	r21, 0x00	; 0
    300a:	d8 f7       	brcc	.-10     	; 0x3002 <memcpy+0x6>
    300c:	08 95       	ret

0000300e <strlen>:
    300e:	fc 01       	movw	r30, r24
    3010:	01 90       	ld	r0, Z+
    3012:	00 20       	and	r0, r0
    3014:	e9 f7       	brne	.-6      	; 0x3010 <strlen+0x2>
    3016:	80 95       	com	r24
    3018:	90 95       	com	r25
    301a:	8e 0f       	add	r24, r30
    301c:	9f 1f       	adc	r25, r31
    301e:	08 95       	ret

00003020 <dtoa_prf>:
    3020:	a9 e0       	ldi	r26, 0x09	; 9
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	e6 e1       	ldi	r30, 0x16	; 22
    3026:	f8 e1       	ldi	r31, 0x18	; 24
    3028:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__prologue_saves__+0x8>
    302c:	6a 01       	movw	r12, r20
    302e:	12 2f       	mov	r17, r18
    3030:	a0 2e       	mov	r10, r16
    3032:	be 2c       	mov	r11, r14
    3034:	2b e3       	ldi	r18, 0x3B	; 59
    3036:	20 17       	cp	r18, r16
    3038:	18 f4       	brcc	.+6      	; 0x3040 <dtoa_prf+0x20>
    303a:	2c e3       	ldi	r18, 0x3C	; 60
    303c:	92 2e       	mov	r9, r18
    303e:	02 c0       	rjmp	.+4      	; 0x3044 <dtoa_prf+0x24>
    3040:	90 2e       	mov	r9, r16
    3042:	93 94       	inc	r9
    3044:	ae 01       	movw	r20, r28
    3046:	4f 5f       	subi	r20, 0xFF	; 255
    3048:	5f 4f       	sbci	r21, 0xFF	; 255
    304a:	27 e0       	ldi	r18, 0x07	; 7
    304c:	09 2d       	mov	r16, r9
    304e:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__ftoa_engine>
    3052:	bc 01       	movw	r22, r24
    3054:	89 81       	ldd	r24, Y+1	; 0x01
    3056:	e8 2e       	mov	r14, r24
    3058:	ff 24       	eor	r15, r15
    305a:	c7 01       	movw	r24, r14
    305c:	89 70       	andi	r24, 0x09	; 9
    305e:	90 70       	andi	r25, 0x00	; 0
    3060:	01 97       	sbiw	r24, 0x01	; 1
    3062:	11 f4       	brne	.+4      	; 0x3068 <dtoa_prf+0x48>
    3064:	ad e2       	ldi	r26, 0x2D	; 45
    3066:	09 c0       	rjmp	.+18     	; 0x307a <dtoa_prf+0x5a>
    3068:	b1 fe       	sbrs	r11, 1
    306a:	02 c0       	rjmp	.+4      	; 0x3070 <dtoa_prf+0x50>
    306c:	ab e2       	ldi	r26, 0x2B	; 43
    306e:	05 c0       	rjmp	.+10     	; 0x307a <dtoa_prf+0x5a>
    3070:	b0 fc       	sbrc	r11, 0
    3072:	02 c0       	rjmp	.+4      	; 0x3078 <dtoa_prf+0x58>
    3074:	a0 e0       	ldi	r26, 0x00	; 0
    3076:	01 c0       	rjmp	.+2      	; 0x307a <dtoa_prf+0x5a>
    3078:	a0 e2       	ldi	r26, 0x20	; 32
    307a:	e3 fe       	sbrs	r14, 3
    307c:	3b c0       	rjmp	.+118    	; 0x30f4 <dtoa_prf+0xd4>
    307e:	aa 23       	and	r26, r26
    3080:	11 f4       	brne	.+4      	; 0x3086 <dtoa_prf+0x66>
    3082:	23 e0       	ldi	r18, 0x03	; 3
    3084:	01 c0       	rjmp	.+2      	; 0x3088 <dtoa_prf+0x68>
    3086:	24 e0       	ldi	r18, 0x04	; 4
    3088:	21 17       	cp	r18, r17
    308a:	10 f0       	brcs	.+4      	; 0x3090 <dtoa_prf+0x70>
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	02 c0       	rjmp	.+4      	; 0x3094 <dtoa_prf+0x74>
    3090:	12 1b       	sub	r17, r18
    3092:	21 2f       	mov	r18, r17
    3094:	eb 2c       	mov	r14, r11
    3096:	b4 fe       	sbrs	r11, 4
    3098:	02 c0       	rjmp	.+4      	; 0x309e <dtoa_prf+0x7e>
    309a:	32 2f       	mov	r19, r18
    309c:	0a c0       	rjmp	.+20     	; 0x30b2 <dtoa_prf+0x92>
    309e:	f6 01       	movw	r30, r12
    30a0:	32 2f       	mov	r19, r18
    30a2:	80 e2       	ldi	r24, 0x20	; 32
    30a4:	02 c0       	rjmp	.+4      	; 0x30aa <dtoa_prf+0x8a>
    30a6:	81 93       	st	Z+, r24
    30a8:	31 50       	subi	r19, 0x01	; 1
    30aa:	33 23       	and	r19, r19
    30ac:	e1 f7       	brne	.-8      	; 0x30a6 <dtoa_prf+0x86>
    30ae:	c2 0e       	add	r12, r18
    30b0:	d1 1c       	adc	r13, r1
    30b2:	aa 23       	and	r26, r26
    30b4:	19 f0       	breq	.+6      	; 0x30bc <dtoa_prf+0x9c>
    30b6:	f6 01       	movw	r30, r12
    30b8:	a1 93       	st	Z+, r26
    30ba:	6f 01       	movw	r12, r30
    30bc:	f6 01       	movw	r30, r12
    30be:	31 96       	adiw	r30, 0x01	; 1
    30c0:	e2 fe       	sbrs	r14, 2
    30c2:	05 c0       	rjmp	.+10     	; 0x30ce <dtoa_prf+0xae>
    30c4:	9e e4       	ldi	r25, 0x4E	; 78
    30c6:	d6 01       	movw	r26, r12
    30c8:	9c 93       	st	X, r25
    30ca:	81 e4       	ldi	r24, 0x41	; 65
    30cc:	04 c0       	rjmp	.+8      	; 0x30d6 <dtoa_prf+0xb6>
    30ce:	9e e6       	ldi	r25, 0x6E	; 110
    30d0:	d6 01       	movw	r26, r12
    30d2:	9c 93       	st	X, r25
    30d4:	81 e6       	ldi	r24, 0x61	; 97
    30d6:	11 96       	adiw	r26, 0x01	; 1
    30d8:	8c 93       	st	X, r24
    30da:	91 83       	std	Z+1, r25	; 0x01
    30dc:	32 96       	adiw	r30, 0x02	; 2
    30de:	df 01       	movw	r26, r30
    30e0:	83 2f       	mov	r24, r19
    30e2:	90 e2       	ldi	r25, 0x20	; 32
    30e4:	02 c0       	rjmp	.+4      	; 0x30ea <dtoa_prf+0xca>
    30e6:	9d 93       	st	X+, r25
    30e8:	81 50       	subi	r24, 0x01	; 1
    30ea:	88 23       	and	r24, r24
    30ec:	e1 f7       	brne	.-8      	; 0x30e6 <dtoa_prf+0xc6>
    30ee:	e3 0f       	add	r30, r19
    30f0:	f1 1d       	adc	r31, r1
    30f2:	40 c0       	rjmp	.+128    	; 0x3174 <dtoa_prf+0x154>
    30f4:	e2 fe       	sbrs	r14, 2
    30f6:	42 c0       	rjmp	.+132    	; 0x317c <dtoa_prf+0x15c>
    30f8:	aa 23       	and	r26, r26
    30fa:	11 f4       	brne	.+4      	; 0x3100 <dtoa_prf+0xe0>
    30fc:	23 e0       	ldi	r18, 0x03	; 3
    30fe:	01 c0       	rjmp	.+2      	; 0x3102 <dtoa_prf+0xe2>
    3100:	24 e0       	ldi	r18, 0x04	; 4
    3102:	21 17       	cp	r18, r17
    3104:	10 f0       	brcs	.+4      	; 0x310a <dtoa_prf+0xea>
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	02 c0       	rjmp	.+4      	; 0x310e <dtoa_prf+0xee>
    310a:	12 1b       	sub	r17, r18
    310c:	21 2f       	mov	r18, r17
    310e:	eb 2c       	mov	r14, r11
    3110:	b4 fe       	sbrs	r11, 4
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <dtoa_prf+0xf8>
    3114:	92 2f       	mov	r25, r18
    3116:	0a c0       	rjmp	.+20     	; 0x312c <dtoa_prf+0x10c>
    3118:	f6 01       	movw	r30, r12
    311a:	92 2f       	mov	r25, r18
    311c:	80 e2       	ldi	r24, 0x20	; 32
    311e:	02 c0       	rjmp	.+4      	; 0x3124 <dtoa_prf+0x104>
    3120:	81 93       	st	Z+, r24
    3122:	91 50       	subi	r25, 0x01	; 1
    3124:	99 23       	and	r25, r25
    3126:	e1 f7       	brne	.-8      	; 0x3120 <dtoa_prf+0x100>
    3128:	c2 0e       	add	r12, r18
    312a:	d1 1c       	adc	r13, r1
    312c:	aa 23       	and	r26, r26
    312e:	19 f0       	breq	.+6      	; 0x3136 <dtoa_prf+0x116>
    3130:	f6 01       	movw	r30, r12
    3132:	a1 93       	st	Z+, r26
    3134:	6f 01       	movw	r12, r30
    3136:	f6 01       	movw	r30, r12
    3138:	31 96       	adiw	r30, 0x01	; 1
    313a:	e2 fe       	sbrs	r14, 2
    313c:	08 c0       	rjmp	.+16     	; 0x314e <dtoa_prf+0x12e>
    313e:	89 e4       	ldi	r24, 0x49	; 73
    3140:	d6 01       	movw	r26, r12
    3142:	8c 93       	st	X, r24
    3144:	8e e4       	ldi	r24, 0x4E	; 78
    3146:	11 96       	adiw	r26, 0x01	; 1
    3148:	8c 93       	st	X, r24
    314a:	86 e4       	ldi	r24, 0x46	; 70
    314c:	07 c0       	rjmp	.+14     	; 0x315c <dtoa_prf+0x13c>
    314e:	89 e6       	ldi	r24, 0x69	; 105
    3150:	d6 01       	movw	r26, r12
    3152:	8c 93       	st	X, r24
    3154:	8e e6       	ldi	r24, 0x6E	; 110
    3156:	11 96       	adiw	r26, 0x01	; 1
    3158:	8c 93       	st	X, r24
    315a:	86 e6       	ldi	r24, 0x66	; 102
    315c:	81 83       	std	Z+1, r24	; 0x01
    315e:	32 96       	adiw	r30, 0x02	; 2
    3160:	df 01       	movw	r26, r30
    3162:	89 2f       	mov	r24, r25
    3164:	20 e2       	ldi	r18, 0x20	; 32
    3166:	02 c0       	rjmp	.+4      	; 0x316c <dtoa_prf+0x14c>
    3168:	2d 93       	st	X+, r18
    316a:	81 50       	subi	r24, 0x01	; 1
    316c:	88 23       	and	r24, r24
    316e:	e1 f7       	brne	.-8      	; 0x3168 <dtoa_prf+0x148>
    3170:	e9 0f       	add	r30, r25
    3172:	f1 1d       	adc	r31, r1
    3174:	10 82       	st	Z, r1
    3176:	2e ef       	ldi	r18, 0xFE	; 254
    3178:	3f ef       	ldi	r19, 0xFF	; 255
    317a:	af c0       	rjmp	.+350    	; 0x32da <dtoa_prf+0x2ba>
    317c:	16 16       	cp	r1, r22
    317e:	17 06       	cpc	r1, r23
    3180:	1c f0       	brlt	.+6      	; 0x3188 <dtoa_prf+0x168>
    3182:	41 e0       	ldi	r20, 0x01	; 1
    3184:	50 e0       	ldi	r21, 0x00	; 0
    3186:	03 c0       	rjmp	.+6      	; 0x318e <dtoa_prf+0x16e>
    3188:	ab 01       	movw	r20, r22
    318a:	4f 5f       	subi	r20, 0xFF	; 255
    318c:	5f 4f       	sbci	r21, 0xFF	; 255
    318e:	aa 20       	and	r10, r10
    3190:	19 f4       	brne	.+6      	; 0x3198 <dtoa_prf+0x178>
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	03 c0       	rjmp	.+6      	; 0x319e <dtoa_prf+0x17e>
    3198:	8a 2d       	mov	r24, r10
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	01 96       	adiw	r24, 0x01	; 1
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	aa 23       	and	r26, r26
    31a4:	11 f0       	breq	.+4      	; 0x31aa <dtoa_prf+0x18a>
    31a6:	21 e0       	ldi	r18, 0x01	; 1
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	24 0f       	add	r18, r20
    31ac:	35 1f       	adc	r19, r21
    31ae:	28 0f       	add	r18, r24
    31b0:	39 1f       	adc	r19, r25
    31b2:	81 2f       	mov	r24, r17
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	28 17       	cp	r18, r24
    31b8:	39 07       	cpc	r19, r25
    31ba:	14 f0       	brlt	.+4      	; 0x31c0 <dtoa_prf+0x1a0>
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	02 c0       	rjmp	.+4      	; 0x31c4 <dtoa_prf+0x1a4>
    31c0:	12 1b       	sub	r17, r18
    31c2:	21 2f       	mov	r18, r17
    31c4:	4b 2d       	mov	r20, r11
    31c6:	50 e0       	ldi	r21, 0x00	; 0
    31c8:	ca 01       	movw	r24, r20
    31ca:	80 71       	andi	r24, 0x10	; 16
    31cc:	90 70       	andi	r25, 0x00	; 0
    31ce:	b4 fc       	sbrc	r11, 4
    31d0:	0d c0       	rjmp	.+26     	; 0x31ec <dtoa_prf+0x1cc>
    31d2:	b3 fc       	sbrc	r11, 3
    31d4:	0b c0       	rjmp	.+22     	; 0x31ec <dtoa_prf+0x1cc>
    31d6:	f6 01       	movw	r30, r12
    31d8:	32 2f       	mov	r19, r18
    31da:	40 e2       	ldi	r20, 0x20	; 32
    31dc:	02 c0       	rjmp	.+4      	; 0x31e2 <dtoa_prf+0x1c2>
    31de:	41 93       	st	Z+, r20
    31e0:	31 50       	subi	r19, 0x01	; 1
    31e2:	33 23       	and	r19, r19
    31e4:	e1 f7       	brne	.-8      	; 0x31de <dtoa_prf+0x1be>
    31e6:	c2 0e       	add	r12, r18
    31e8:	d1 1c       	adc	r13, r1
    31ea:	01 c0       	rjmp	.+2      	; 0x31ee <dtoa_prf+0x1ce>
    31ec:	32 2f       	mov	r19, r18
    31ee:	aa 23       	and	r26, r26
    31f0:	19 f0       	breq	.+6      	; 0x31f8 <dtoa_prf+0x1d8>
    31f2:	f6 01       	movw	r30, r12
    31f4:	a1 93       	st	Z+, r26
    31f6:	6f 01       	movw	r12, r30
    31f8:	89 2b       	or	r24, r25
    31fa:	11 f0       	breq	.+4      	; 0x3200 <dtoa_prf+0x1e0>
    31fc:	13 2f       	mov	r17, r19
    31fe:	0a c0       	rjmp	.+20     	; 0x3214 <dtoa_prf+0x1f4>
    3200:	f6 01       	movw	r30, r12
    3202:	13 2f       	mov	r17, r19
    3204:	80 e3       	ldi	r24, 0x30	; 48
    3206:	02 c0       	rjmp	.+4      	; 0x320c <dtoa_prf+0x1ec>
    3208:	81 93       	st	Z+, r24
    320a:	11 50       	subi	r17, 0x01	; 1
    320c:	11 23       	and	r17, r17
    320e:	e1 f7       	brne	.-8      	; 0x3208 <dtoa_prf+0x1e8>
    3210:	c3 0e       	add	r12, r19
    3212:	d1 1c       	adc	r13, r1
    3214:	09 2d       	mov	r16, r9
    3216:	06 0f       	add	r16, r22
    3218:	ba 80       	ldd	r11, Y+2	; 0x02
    321a:	90 e1       	ldi	r25, 0x10	; 16
    321c:	89 2e       	mov	r8, r25
    321e:	91 2c       	mov	r9, r1
    3220:	8e 20       	and	r8, r14
    3222:	9f 20       	and	r9, r15
    3224:	e4 fe       	sbrs	r14, 4
    3226:	04 c0       	rjmp	.+8      	; 0x3230 <dtoa_prf+0x210>
    3228:	f1 e3       	ldi	r31, 0x31	; 49
    322a:	bf 16       	cp	r11, r31
    322c:	09 f4       	brne	.+2      	; 0x3230 <dtoa_prf+0x210>
    322e:	01 50       	subi	r16, 0x01	; 1
    3230:	10 16       	cp	r1, r16
    3232:	14 f0       	brlt	.+4      	; 0x3238 <dtoa_prf+0x218>
    3234:	01 e0       	ldi	r16, 0x01	; 1
    3236:	03 c0       	rjmp	.+6      	; 0x323e <dtoa_prf+0x21e>
    3238:	09 30       	cpi	r16, 0x09	; 9
    323a:	08 f0       	brcs	.+2      	; 0x323e <dtoa_prf+0x21e>
    323c:	08 e0       	ldi	r16, 0x08	; 8
    323e:	9b 01       	movw	r18, r22
    3240:	77 ff       	sbrs	r23, 7
    3242:	02 c0       	rjmp	.+4      	; 0x3248 <dtoa_prf+0x228>
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	cb 01       	movw	r24, r22
    324a:	01 96       	adiw	r24, 0x01	; 1
    324c:	82 1b       	sub	r24, r18
    324e:	93 0b       	sbc	r25, r19
    3250:	fe 01       	movw	r30, r28
    3252:	31 96       	adiw	r30, 0x01	; 1
    3254:	e8 0f       	add	r30, r24
    3256:	f9 1f       	adc	r31, r25
    3258:	8e e2       	ldi	r24, 0x2E	; 46
    325a:	f8 2e       	mov	r15, r24
    325c:	3b 01       	movw	r6, r22
    325e:	60 1a       	sub	r6, r16
    3260:	71 08       	sbc	r7, r1
    3262:	8a 2d       	mov	r24, r10
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	44 27       	eor	r20, r20
    3268:	55 27       	eor	r21, r21
    326a:	48 1b       	sub	r20, r24
    326c:	59 0b       	sbc	r21, r25
    326e:	8f ef       	ldi	r24, 0xFF	; 255
    3270:	2f 3f       	cpi	r18, 0xFF	; 255
    3272:	38 07       	cpc	r19, r24
    3274:	19 f4       	brne	.+6      	; 0x327c <dtoa_prf+0x25c>
    3276:	d6 01       	movw	r26, r12
    3278:	fd 92       	st	X+, r15
    327a:	6d 01       	movw	r12, r26
    327c:	62 17       	cp	r22, r18
    327e:	73 07       	cpc	r23, r19
    3280:	2c f0       	brlt	.+10     	; 0x328c <dtoa_prf+0x26c>
    3282:	62 16       	cp	r6, r18
    3284:	73 06       	cpc	r7, r19
    3286:	14 f4       	brge	.+4      	; 0x328c <dtoa_prf+0x26c>
    3288:	80 81       	ld	r24, Z
    328a:	01 c0       	rjmp	.+2      	; 0x328e <dtoa_prf+0x26e>
    328c:	80 e3       	ldi	r24, 0x30	; 48
    328e:	21 50       	subi	r18, 0x01	; 1
    3290:	30 40       	sbci	r19, 0x00	; 0
    3292:	31 96       	adiw	r30, 0x01	; 1
    3294:	24 17       	cp	r18, r20
    3296:	35 07       	cpc	r19, r21
    3298:	24 f0       	brlt	.+8      	; 0x32a2 <dtoa_prf+0x282>
    329a:	d6 01       	movw	r26, r12
    329c:	8d 93       	st	X+, r24
    329e:	6d 01       	movw	r12, r26
    32a0:	e6 cf       	rjmp	.-52     	; 0x326e <dtoa_prf+0x24e>
    32a2:	26 17       	cp	r18, r22
    32a4:	37 07       	cpc	r19, r23
    32a6:	49 f4       	brne	.+18     	; 0x32ba <dtoa_prf+0x29a>
    32a8:	b5 e3       	ldi	r27, 0x35	; 53
    32aa:	bb 15       	cp	r27, r11
    32ac:	28 f0       	brcs	.+10     	; 0x32b8 <dtoa_prf+0x298>
    32ae:	bb 16       	cp	r11, r27
    32b0:	21 f4       	brne	.+8      	; 0x32ba <dtoa_prf+0x29a>
    32b2:	81 14       	cp	r8, r1
    32b4:	91 04       	cpc	r9, r1
    32b6:	09 f4       	brne	.+2      	; 0x32ba <dtoa_prf+0x29a>
    32b8:	81 e3       	ldi	r24, 0x31	; 49
    32ba:	f6 01       	movw	r30, r12
    32bc:	81 93       	st	Z+, r24
    32be:	d6 01       	movw	r26, r12
    32c0:	81 2f       	mov	r24, r17
    32c2:	90 e2       	ldi	r25, 0x20	; 32
    32c4:	02 c0       	rjmp	.+4      	; 0x32ca <dtoa_prf+0x2aa>
    32c6:	9c 93       	st	X, r25
    32c8:	81 50       	subi	r24, 0x01	; 1
    32ca:	11 96       	adiw	r26, 0x01	; 1
    32cc:	88 23       	and	r24, r24
    32ce:	d9 f7       	brne	.-10     	; 0x32c6 <dtoa_prf+0x2a6>
    32d0:	e1 0f       	add	r30, r17
    32d2:	f1 1d       	adc	r31, r1
    32d4:	10 82       	st	Z, r1
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	c9 01       	movw	r24, r18
    32dc:	29 96       	adiw	r28, 0x09	; 9
    32de:	ee e0       	ldi	r30, 0x0E	; 14
    32e0:	0c 94 c6 17 	jmp	0x2f8c	; 0x2f8c <__epilogue_restores__+0x8>

000032e4 <__ftoa_engine>:
    32e4:	28 30       	cpi	r18, 0x08	; 8
    32e6:	08 f0       	brcs	.+2      	; 0x32ea <__ftoa_engine+0x6>
    32e8:	27 e0       	ldi	r18, 0x07	; 7
    32ea:	33 27       	eor	r19, r19
    32ec:	da 01       	movw	r26, r20
    32ee:	99 0f       	add	r25, r25
    32f0:	31 1d       	adc	r19, r1
    32f2:	87 fd       	sbrc	r24, 7
    32f4:	91 60       	ori	r25, 0x01	; 1
    32f6:	00 96       	adiw	r24, 0x00	; 0
    32f8:	61 05       	cpc	r22, r1
    32fa:	71 05       	cpc	r23, r1
    32fc:	39 f4       	brne	.+14     	; 0x330c <__ftoa_engine+0x28>
    32fe:	32 60       	ori	r19, 0x02	; 2
    3300:	2e 5f       	subi	r18, 0xFE	; 254
    3302:	3d 93       	st	X+, r19
    3304:	30 e3       	ldi	r19, 0x30	; 48
    3306:	2a 95       	dec	r18
    3308:	e1 f7       	brne	.-8      	; 0x3302 <__ftoa_engine+0x1e>
    330a:	08 95       	ret
    330c:	9f 3f       	cpi	r25, 0xFF	; 255
    330e:	30 f0       	brcs	.+12     	; 0x331c <__ftoa_engine+0x38>
    3310:	80 38       	cpi	r24, 0x80	; 128
    3312:	71 05       	cpc	r23, r1
    3314:	61 05       	cpc	r22, r1
    3316:	09 f0       	breq	.+2      	; 0x331a <__ftoa_engine+0x36>
    3318:	3c 5f       	subi	r19, 0xFC	; 252
    331a:	3c 5f       	subi	r19, 0xFC	; 252
    331c:	3d 93       	st	X+, r19
    331e:	91 30       	cpi	r25, 0x01	; 1
    3320:	08 f0       	brcs	.+2      	; 0x3324 <__ftoa_engine+0x40>
    3322:	80 68       	ori	r24, 0x80	; 128
    3324:	91 1d       	adc	r25, r1
    3326:	df 93       	push	r29
    3328:	cf 93       	push	r28
    332a:	1f 93       	push	r17
    332c:	0f 93       	push	r16
    332e:	ff 92       	push	r15
    3330:	ef 92       	push	r14
    3332:	19 2f       	mov	r17, r25
    3334:	98 7f       	andi	r25, 0xF8	; 248
    3336:	96 95       	lsr	r25
    3338:	e9 2f       	mov	r30, r25
    333a:	96 95       	lsr	r25
    333c:	96 95       	lsr	r25
    333e:	e9 0f       	add	r30, r25
    3340:	ff 27       	eor	r31, r31
    3342:	e2 55       	subi	r30, 0x52	; 82
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	99 27       	eor	r25, r25
    3348:	33 27       	eor	r19, r19
    334a:	ee 24       	eor	r14, r14
    334c:	ff 24       	eor	r15, r15
    334e:	a7 01       	movw	r20, r14
    3350:	e7 01       	movw	r28, r14
    3352:	05 90       	lpm	r0, Z+
    3354:	08 94       	sec
    3356:	07 94       	ror	r0
    3358:	28 f4       	brcc	.+10     	; 0x3364 <__ftoa_engine+0x80>
    335a:	36 0f       	add	r19, r22
    335c:	e7 1e       	adc	r14, r23
    335e:	f8 1e       	adc	r15, r24
    3360:	49 1f       	adc	r20, r25
    3362:	51 1d       	adc	r21, r1
    3364:	66 0f       	add	r22, r22
    3366:	77 1f       	adc	r23, r23
    3368:	88 1f       	adc	r24, r24
    336a:	99 1f       	adc	r25, r25
    336c:	06 94       	lsr	r0
    336e:	a1 f7       	brne	.-24     	; 0x3358 <__ftoa_engine+0x74>
    3370:	05 90       	lpm	r0, Z+
    3372:	07 94       	ror	r0
    3374:	28 f4       	brcc	.+10     	; 0x3380 <__ftoa_engine+0x9c>
    3376:	e7 0e       	add	r14, r23
    3378:	f8 1e       	adc	r15, r24
    337a:	49 1f       	adc	r20, r25
    337c:	56 1f       	adc	r21, r22
    337e:	c1 1d       	adc	r28, r1
    3380:	77 0f       	add	r23, r23
    3382:	88 1f       	adc	r24, r24
    3384:	99 1f       	adc	r25, r25
    3386:	66 1f       	adc	r22, r22
    3388:	06 94       	lsr	r0
    338a:	a1 f7       	brne	.-24     	; 0x3374 <__ftoa_engine+0x90>
    338c:	05 90       	lpm	r0, Z+
    338e:	07 94       	ror	r0
    3390:	28 f4       	brcc	.+10     	; 0x339c <__ftoa_engine+0xb8>
    3392:	f8 0e       	add	r15, r24
    3394:	49 1f       	adc	r20, r25
    3396:	56 1f       	adc	r21, r22
    3398:	c7 1f       	adc	r28, r23
    339a:	d1 1d       	adc	r29, r1
    339c:	88 0f       	add	r24, r24
    339e:	99 1f       	adc	r25, r25
    33a0:	66 1f       	adc	r22, r22
    33a2:	77 1f       	adc	r23, r23
    33a4:	06 94       	lsr	r0
    33a6:	a1 f7       	brne	.-24     	; 0x3390 <__ftoa_engine+0xac>
    33a8:	05 90       	lpm	r0, Z+
    33aa:	07 94       	ror	r0
    33ac:	20 f4       	brcc	.+8      	; 0x33b6 <__ftoa_engine+0xd2>
    33ae:	49 0f       	add	r20, r25
    33b0:	56 1f       	adc	r21, r22
    33b2:	c7 1f       	adc	r28, r23
    33b4:	d8 1f       	adc	r29, r24
    33b6:	99 0f       	add	r25, r25
    33b8:	66 1f       	adc	r22, r22
    33ba:	77 1f       	adc	r23, r23
    33bc:	88 1f       	adc	r24, r24
    33be:	06 94       	lsr	r0
    33c0:	a9 f7       	brne	.-22     	; 0x33ac <__ftoa_engine+0xc8>
    33c2:	84 91       	lpm	r24, Z+
    33c4:	10 95       	com	r17
    33c6:	17 70       	andi	r17, 0x07	; 7
    33c8:	41 f0       	breq	.+16     	; 0x33da <__ftoa_engine+0xf6>
    33ca:	d6 95       	lsr	r29
    33cc:	c7 95       	ror	r28
    33ce:	57 95       	ror	r21
    33d0:	47 95       	ror	r20
    33d2:	f7 94       	ror	r15
    33d4:	e7 94       	ror	r14
    33d6:	1a 95       	dec	r17
    33d8:	c1 f7       	brne	.-16     	; 0x33ca <__ftoa_engine+0xe6>
    33da:	e4 e5       	ldi	r30, 0x54	; 84
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	68 94       	set
    33e0:	15 90       	lpm	r1, Z+
    33e2:	15 91       	lpm	r17, Z+
    33e4:	35 91       	lpm	r19, Z+
    33e6:	65 91       	lpm	r22, Z+
    33e8:	95 91       	lpm	r25, Z+
    33ea:	05 90       	lpm	r0, Z+
    33ec:	7f e2       	ldi	r23, 0x2F	; 47
    33ee:	73 95       	inc	r23
    33f0:	e1 18       	sub	r14, r1
    33f2:	f1 0a       	sbc	r15, r17
    33f4:	43 0b       	sbc	r20, r19
    33f6:	56 0b       	sbc	r21, r22
    33f8:	c9 0b       	sbc	r28, r25
    33fa:	d0 09       	sbc	r29, r0
    33fc:	c0 f7       	brcc	.-16     	; 0x33ee <__ftoa_engine+0x10a>
    33fe:	e1 0c       	add	r14, r1
    3400:	f1 1e       	adc	r15, r17
    3402:	43 1f       	adc	r20, r19
    3404:	56 1f       	adc	r21, r22
    3406:	c9 1f       	adc	r28, r25
    3408:	d0 1d       	adc	r29, r0
    340a:	7e f4       	brtc	.+30     	; 0x342a <__ftoa_engine+0x146>
    340c:	70 33       	cpi	r23, 0x30	; 48
    340e:	11 f4       	brne	.+4      	; 0x3414 <__ftoa_engine+0x130>
    3410:	8a 95       	dec	r24
    3412:	e6 cf       	rjmp	.-52     	; 0x33e0 <__ftoa_engine+0xfc>
    3414:	e8 94       	clt
    3416:	01 50       	subi	r16, 0x01	; 1
    3418:	30 f0       	brcs	.+12     	; 0x3426 <__ftoa_engine+0x142>
    341a:	08 0f       	add	r16, r24
    341c:	0a f4       	brpl	.+2      	; 0x3420 <__ftoa_engine+0x13c>
    341e:	00 27       	eor	r16, r16
    3420:	02 17       	cp	r16, r18
    3422:	08 f4       	brcc	.+2      	; 0x3426 <__ftoa_engine+0x142>
    3424:	20 2f       	mov	r18, r16
    3426:	23 95       	inc	r18
    3428:	02 2f       	mov	r16, r18
    342a:	7a 33       	cpi	r23, 0x3A	; 58
    342c:	28 f0       	brcs	.+10     	; 0x3438 <__ftoa_engine+0x154>
    342e:	79 e3       	ldi	r23, 0x39	; 57
    3430:	7d 93       	st	X+, r23
    3432:	2a 95       	dec	r18
    3434:	e9 f7       	brne	.-6      	; 0x3430 <__ftoa_engine+0x14c>
    3436:	10 c0       	rjmp	.+32     	; 0x3458 <__ftoa_engine+0x174>
    3438:	7d 93       	st	X+, r23
    343a:	2a 95       	dec	r18
    343c:	89 f6       	brne	.-94     	; 0x33e0 <__ftoa_engine+0xfc>
    343e:	06 94       	lsr	r0
    3440:	97 95       	ror	r25
    3442:	67 95       	ror	r22
    3444:	37 95       	ror	r19
    3446:	17 95       	ror	r17
    3448:	17 94       	ror	r1
    344a:	e1 18       	sub	r14, r1
    344c:	f1 0a       	sbc	r15, r17
    344e:	43 0b       	sbc	r20, r19
    3450:	56 0b       	sbc	r21, r22
    3452:	c9 0b       	sbc	r28, r25
    3454:	d0 09       	sbc	r29, r0
    3456:	98 f0       	brcs	.+38     	; 0x347e <__ftoa_engine+0x19a>
    3458:	23 95       	inc	r18
    345a:	7e 91       	ld	r23, -X
    345c:	73 95       	inc	r23
    345e:	7a 33       	cpi	r23, 0x3A	; 58
    3460:	08 f0       	brcs	.+2      	; 0x3464 <__ftoa_engine+0x180>
    3462:	70 e3       	ldi	r23, 0x30	; 48
    3464:	7c 93       	st	X, r23
    3466:	20 13       	cpse	r18, r16
    3468:	b8 f7       	brcc	.-18     	; 0x3458 <__ftoa_engine+0x174>
    346a:	7e 91       	ld	r23, -X
    346c:	70 61       	ori	r23, 0x10	; 16
    346e:	7d 93       	st	X+, r23
    3470:	30 f0       	brcs	.+12     	; 0x347e <__ftoa_engine+0x19a>
    3472:	83 95       	inc	r24
    3474:	71 e3       	ldi	r23, 0x31	; 49
    3476:	7d 93       	st	X+, r23
    3478:	70 e3       	ldi	r23, 0x30	; 48
    347a:	2a 95       	dec	r18
    347c:	e1 f7       	brne	.-8      	; 0x3476 <__ftoa_engine+0x192>
    347e:	11 24       	eor	r1, r1
    3480:	ef 90       	pop	r14
    3482:	ff 90       	pop	r15
    3484:	0f 91       	pop	r16
    3486:	1f 91       	pop	r17
    3488:	cf 91       	pop	r28
    348a:	df 91       	pop	r29
    348c:	99 27       	eor	r25, r25
    348e:	87 fd       	sbrc	r24, 7
    3490:	90 95       	com	r25
    3492:	08 95       	ret

00003494 <_exit>:
    3494:	f8 94       	cli

00003496 <__stop_program>:
    3496:	ff cf       	rjmp	.-2      	; 0x3496 <__stop_program>
